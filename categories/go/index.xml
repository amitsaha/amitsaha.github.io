<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Exploring Software</title>
    <link>https://echorand.me/categories/go/</link>
    <description>Recent content in go on Exploring Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://echorand.me/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Concurrency safe file access in Go</title>
      <link>https://echorand.me/posts/go-file-mutex/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://echorand.me/posts/go-file-mutex/</guid>
      <description>Using a file for persistent storage (and not a database - datastore/object store) sounds like an academic exercise. For me, it brings back memories of writing a structure in C (programming language) to a file to simulate a student record database. However, there may be situations where you may just get by using it especially when you just want to run a single copy of your application.
Let&amp;rsquo;s see a pattern for implementing concurrency safe file access in Go using sync.</description>
    </item>
    
    <item>
      <title>Embedding files in Go using the &#34;embed&#34; package</title>
      <link>https://echorand.me/posts/go-embed/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://echorand.me/posts/go-embed/</guid>
      <description>Go 1.16 Beta 1 was announced recently and the most exciting feature for me in this release is the new &amp;ldquo;embed&amp;rdquo; package which allows you to embed a file contents as part of the Go application binary.
This ability so far was most easily available via using various third party packages and they worked great. You could also use go generate to roll out your own solution, if needed. However, now having this facility in the form of a standard library package is great news.</description>
    </item>
    
    <item>
      <title>Notes on Go</title>
      <link>https://echorand.me/posts/go-notes/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://echorand.me/posts/go-notes/</guid>
      <description>Repeating the same argument to Printf If we wanted to repeat the same argument to a call to fmt.Printf(), we can make use of &amp;ldquo;indexed&amp;rdquo; arguments. That is, instead of writing fmt.Printf(&amp;quot;%s %s&amp;quot;, &amp;quot;Hello&amp;quot;, &amp;quot;Hello&amp;quot;), we can write fmt.Printf(&amp;quot;%[1]s %[1]s&amp;quot;, &amp;quot;Hello&amp;quot;). Learn about it in the docs.
Multi-line strings Things are hassle free on the multi-line strings front:
package main import ( &amp;quot;fmt&amp;quot; ) func main() { s := `Multi line strings are easy.</description>
    </item>
    
  </channel>
</rss>
