<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Programming and Writing about it</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2017-02-27T18:00:00+10:00</updated><entry><title>Setup Golang 1.8 and gb on Fedora (and other Linux distributions)</title><link href="/setup-golang-18-and-gb-on-fedora-and-other-linux-distributions.html" rel="alternate"></link><published>2017-02-27T18:00:00+10:00</published><updated>2017-02-27T18:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2017-02-27:/setup-golang-18-and-gb-on-fedora-and-other-linux-distributions.html</id><summary type="html">&lt;p&gt;This guide will be how I usually setup and get started with Go development environment on Linux. By the end of this document, we will have seen how to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install the Go 1.8 compiler and other tools (&lt;tt class="docutils literal"&gt;gofmt&lt;/tt&gt;, for eaxmple), collectively referred to as go tools&lt;/li&gt;
&lt;li&gt;Install &lt;a class="reference external" href="http://getgb.io"&gt;gb&lt;/a&gt; and …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This guide will be how I usually setup and get started with Go development environment on Linux. By the end of this document, we will have seen how to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install the Go 1.8 compiler and other tools (&lt;tt class="docutils literal"&gt;gofmt&lt;/tt&gt;, for eaxmple), collectively referred to as go tools&lt;/li&gt;
&lt;li&gt;Install &lt;a class="reference external" href="http://getgb.io"&gt;gb&lt;/a&gt; and the &lt;tt class="docutils literal"&gt;vendor&lt;/tt&gt; plugin&lt;/li&gt;
&lt;li&gt;Vendoring third party packages&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="installing-go-tools"&gt;
&lt;h2&gt;Installing Go tools&lt;/h2&gt;
&lt;p&gt;We can follow the official &lt;a class="reference external" href="https://golang.org/doc/install"&gt;install guide&lt;/a&gt; to get the latest stable version of the Go tools:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Download the Linux binary tarball from the &lt;a class="reference external" href="https://golang.org/dl/"&gt;Downloads page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;sudo tar &lt;span class="pre"&gt;-C&lt;/span&gt; /usr/local &lt;span class="pre"&gt;-xzf&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;filename-from-above&amp;gt;&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;export &lt;span class="pre"&gt;PATH=$PATH:/usr/local/go/bin&lt;/span&gt;&lt;/tt&gt; in your &lt;tt class="docutils literal"&gt;.bashrc&lt;/tt&gt; or similar file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we now open a new terminal session, we should be able to type in &lt;cite&gt;go version&lt;/cite&gt; and get the version we installed:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go version
go version go1.8 linux/amd64
&lt;/pre&gt;
&lt;p&gt;If we see this, we are all set to go to the next stage.&lt;/p&gt;
&lt;p&gt;Golang expects us to structure our source code in a certain way. You can read all about it
in this &lt;a class="reference external" href="https://golang.org/doc/code.html"&gt;document&lt;/a&gt;. The summarized version is that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;All our go code (including those of packages we use) in a single directory&lt;/li&gt;
&lt;li&gt;The environment variable &lt;tt class="docutils literal"&gt;GOPATH&lt;/tt&gt; points to this single directory&lt;/li&gt;
&lt;li&gt;This single directory has three sub-directories: &lt;tt class="docutils literal"&gt;src&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;bin&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;pkg&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;It is in the &lt;tt class="docutils literal"&gt;src&lt;/tt&gt; sub-directory where all our Go code will live&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prior to version 1.8, we needed to setup a Go workspace and set the &lt;tt class="docutils literal"&gt;GOPATH&lt;/tt&gt; environment variable before we could
start working with golang. Golang 1.8 will automatically use &lt;tt class="docutils literal"&gt;$HOME/go&lt;/tt&gt; as the GOPATH if one is not set:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go env GOPATH
/home/user/go
&lt;/pre&gt;
&lt;p&gt;If you are happy with the selection, you can skip the next step. You can learn more about
GOPATH &lt;a class="reference external" href="https://golang.org/cmd/go/#hdr-GOPATH_environment_variable"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-the-go-workspace"&gt;
&lt;h2&gt;Setting up the Go workspace&lt;/h2&gt;
&lt;p&gt;Let's say you want to set the &lt;tt class="docutils literal"&gt;GOPATH&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;$HOME/work/golang&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ mkdir -p $HOME/work/golang
$ mkdir -p $HOME/work/golang/src $HOME/work/golang/bin $HOME/work/golang/pkg
&lt;/pre&gt;
&lt;p&gt;At this stage, our $GOPATH directory tree looks like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ tree -L 1 work/golang/
work/golang/
├── bin
├── pkg
└── src
&lt;/pre&gt;
&lt;p&gt;Next, we will add the line &lt;tt class="docutils literal"&gt;export &lt;span class="pre"&gt;GOPATH=$HOME/work/golang&lt;/span&gt;&lt;/tt&gt; in the &lt;tt class="docutils literal"&gt;.bashrc&lt;/tt&gt; (or another similar file). If we now start a new terminal session, we should see that &lt;tt class="docutils literal"&gt;GOPATH&lt;/tt&gt; is now setup to this path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-our-first-program"&gt;
&lt;h2&gt;Writing our first program&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;
$ go env GOPATH
/home/asaha/work/golang
&lt;/pre&gt;
&lt;p&gt;There are two types of Golang programs we can write - one is an application program (output is an executable program) and the other is a package which is meant to be used in other programs. We will first write a program which will be compiled to an executable.&lt;/p&gt;
&lt;p&gt;First, create a directory tree in &lt;tt class="docutils literal"&gt;$GOPATH/src&lt;/tt&gt; for our package:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ mkdir -p $GOPATH/src/github.com/amitsaha/golang_gettingstarted
&lt;/pre&gt;
&lt;p&gt;Our package name for the above directory tree becomes &lt;tt class="docutils literal"&gt;github.com/amitsaha/golang_gettingstarted&lt;/tt&gt;. Then, type in the following in &lt;tt class="docutils literal"&gt;$GOPATH/src/github.com/amitsaha/golang_gettingstarted/main.go&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
package main

import (
         &amp;quot;fmt&amp;quot;
)

func main() {
         fmt.Printf(&amp;quot;Hello World\n&amp;quot;)
}
&lt;/pre&gt;
&lt;p&gt;Next, build and run the program as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go run $GOPATH/src/github.com/amitsaha/golang_gettingstarted/main.go
Hello World
&lt;/pre&gt;
&lt;p&gt;Great! Our program compiled and ran successfully. Our workspace at this stage only has a single file - the one we created above:&lt;/p&gt;
&lt;p&gt;... code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ tree
.
├── bin
├── pkg
└── src
         └── github.com
                 └── amitsaha
                         └── golang_gettingstarted
                             └── main.go
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-go-applications"&gt;
&lt;h2&gt;Installing Go applications&lt;/h2&gt;
&lt;p&gt;Now, let's say that the program above was actually a utility we wrote and we want to use it regularly. Where as we could execute &lt;tt class="docutils literal"&gt;go run&lt;/tt&gt; as above, but the more convenient approach is to install the program. &lt;tt class="docutils literal"&gt;go install&lt;/tt&gt; command is used to build and install Go packages. Let's try it on our package:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go install github.com/amitsaha/golang_gettingstarted/
&lt;/pre&gt;
&lt;p&gt;You can execute this command from anywhere on your filesystem. Go will figure out the path to the package from GOPATH we set above. Now, you will see that there is a &lt;tt class="docutils literal"&gt;golang_gettingstarted&lt;/tt&gt; executable file in the &lt;tt class="docutils literal"&gt;$GOPATH/bin&lt;/tt&gt; directory:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ tree work/golang/
work/golang/
├── bin
│&amp;nbsp;&amp;nbsp; └── golang_gettingstarted
├── pkg
└── src
     └── github.com
         └── amitsaha
                └── golang_gettingstarted
                         └── main.go
&lt;/pre&gt;
&lt;p&gt;We can try executing the command:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ ./work/golang/bin/golang_gettingstarted
Hello World
&lt;/pre&gt;
&lt;p&gt;As a shortcut, we can just execute &lt;tt class="docutils literal"&gt;$GOPATH/bin/golang_gettingstarted&lt;/tt&gt;. But, you wouldn't need to even do that if &lt;tt class="docutils literal"&gt;$GOPATH/bin&lt;/tt&gt; is in your &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt;. So, if you want, you can do that and then you could just specify &lt;tt class="docutils literal"&gt;golang_gettingstarted&lt;/tt&gt; and the program would be executed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="working-with-third-party-packages"&gt;
&lt;h2&gt;Working with third-party packages&lt;/h2&gt;
&lt;p&gt;Let's now replace the &lt;tt class="docutils literal"&gt;main.go&lt;/tt&gt; file above by the example code from the package &lt;a class="reference external" href="https://github.com/cheggaaa/pb"&gt;pb&lt;/a&gt; which lets us create nice progress bars:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
package main

import (
    &amp;quot;gopkg.in/cheggaaa/pb.v1&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {
    count := 100000
    bar := pb.StartNew(count)
    for i := 0; i &amp;lt; count; i++ {
        bar.Increment()
        time.Sleep(time.Millisecond)
    }
    bar.FinishPrint(&amp;quot;The End!&amp;quot;)
}
&lt;/pre&gt;
&lt;p&gt;Let's try and install this package:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go install github.com/amitsaha/golang_gettingstarted
golang/src/github.com/amitsaha/golang_gettingstarted/main.go:6:5: cannot find package &amp;quot;gopkg.in/cheggaaa/pb.v1&amp;quot; in any of:
     /usr/lib/golang/src/gopkg.in/cheggaaa/pb.v1 (from $GOROOT)
     /home/asaha/work/golang/src/gopkg.in/cheggaaa/pb.v1 (from $GOPATH)
&lt;/pre&gt;
&lt;p&gt;Basically, this tells us that Go compiler is not able to find the package &lt;tt class="docutils literal"&gt;gopkg.in/cheggaaa/pb.v1&lt;/tt&gt;. So, let's get it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go get  gopkg.in/cheggaaa/pb.v1
&lt;/pre&gt;
&lt;p&gt;This will download the package and place it in &lt;tt class="docutils literal"&gt;$GOPATH/src&lt;/tt&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code literal-block"&gt;
$ tree -L 3 $GOPATH/src/
 /home/asaha/work/golang/src/
 ├── github.com
         │&amp;nbsp;&amp;nbsp; └── amitsaha
         │&amp;nbsp;&amp;nbsp;     └── golang_gettingstarted
 └── gopkg.in
         └── cheggaaa
                └── pb.v1
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we now install our package again, it will build correctly and an executable &lt;tt class="docutils literal"&gt;golang_gettingstarted&lt;/tt&gt;
will be placed in &lt;tt class="docutils literal"&gt;$GOPATH/bin&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go install github.com/amitsaha/golang_gettingstarted
$ $GOPATH/bin/golang_gettingstarted
 100000 / 100000 [======================================================================================================]100.00% 1m49s
 The End!
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="golang-package-objects"&gt;
&lt;h2&gt;Golang package objects&lt;/h2&gt;
&lt;p&gt;If we now display the directory contents of &lt;tt class="docutils literal"&gt;$GOPATH&lt;/tt&gt;, we will see:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ tree -L 2 golang/
golang/
    ├── bin
    │&amp;nbsp;&amp;nbsp;  └── golang_gettingstarted
    ├── pkg
    │&amp;nbsp;&amp;nbsp; └── linux_amd64
    └── src
        ├── github.com
        └── gopkg.in
&lt;/pre&gt;
&lt;p&gt;The contents in &lt;tt class="docutils literal"&gt;pkg&lt;/tt&gt; sub-directory are referred to as &lt;cite&gt;package objects&lt;/cite&gt; - basically built Golang packages. This is the difference from application programs (programs having &lt;tt class="docutils literal"&gt;package main&lt;/tt&gt;). This question from a while back on the golang-nuts group may be &lt;a class="reference external" href="https://groups.google.com/forum/m/#!topic/golang-nuts/RSd3B5_rIFE"&gt;interesting&lt;/a&gt; to read.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-gb-to-manage-projects"&gt;
&lt;h2&gt;Using gb to manage projects&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://getgb.io"&gt;gb&lt;/a&gt; is Go build tool which works with the idea of projects. For me it has two features
for which I use it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It doesn't require my project to be in &lt;tt class="docutils literal"&gt;$GOPATH/src&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;It allows me to vendor and manage thrird party packages easily&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The disadvantage of using &lt;tt class="docutils literal"&gt;gb&lt;/tt&gt; to manage your project is that your project is not &amp;quot;go gettable&amp;quot;. But, let's ignore
it for now.&lt;/p&gt;
&lt;div class="section" id="installing-gb"&gt;
&lt;h3&gt;Installing gb&lt;/h3&gt;
&lt;p&gt;The following will fetch and install &lt;tt class="docutils literal"&gt;gb&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;$GOPATH/bin&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go get github.com/constabulary/gb/...
&lt;/pre&gt;
&lt;p&gt;If not already done, please add &lt;tt class="docutils literal"&gt;$GOPATH/bin&lt;/tt&gt; to your &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; environment variable and start
a new shell session and type in &lt;tt class="docutils literal"&gt;gb&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ gb
gb, a project based build tool for the Go programming language.

Usage:

     gb command [arguments]
..
&lt;/pre&gt;
&lt;p&gt;We will next install the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gb-vendor&lt;/span&gt;&lt;/tt&gt; &lt;a class="reference external" href="https://godoc.org/github.com/constabulary/gb/cmd/gb-vendor"&gt;plugin&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go get github.com/constabulary/gb/cmd/gb-vendor
&lt;/pre&gt;
&lt;p&gt;Let's now setup the above project, but now as a &lt;tt class="docutils literal"&gt;gb&lt;/tt&gt; project. Create a directory &lt;tt class="docutils literal"&gt;pb_demo&lt;/tt&gt; anywhere
in your &lt;tt class="docutils literal"&gt;$HOME&lt;/tt&gt; and create a sub-directory &lt;tt class="docutils literal"&gt;src&lt;/tt&gt; under it. Inside &lt;tt class="docutils literal"&gt;src&lt;/tt&gt;, we will create another
subirectory &lt;tt class="docutils literal"&gt;demo&lt;/tt&gt; inside it - &lt;tt class="docutils literal"&gt;demo&lt;/tt&gt; is our project name, and place &lt;tt class="docutils literal"&gt;main.go&lt;/tt&gt; above in it.&lt;/p&gt;
&lt;p&gt;The resulting directory structure will look like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ tree pb-demo/
pb-demo/
`-- src
    `-- demo
        `-- main.go
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pb-demo&lt;/span&gt;&lt;/tt&gt; directory is now a valid &lt;tt class="docutils literal"&gt;gb&lt;/tt&gt; project. Let's fetch the dependency:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ cd pb-demo
$ gb vendor fetch gopkg.in/cheggaaa/pb.v1
fetching recursive dependency github.com/mattn/go-runewidth
&lt;/pre&gt;
&lt;p&gt;You will now see a new sub-directory &lt;tt class="docutils literal"&gt;vendor&lt;/tt&gt; inside &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pb-demo&lt;/span&gt;&lt;/tt&gt;. We can now go ahead and build our project:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ cd pb-demo/
$ gb build
github.com/mattn/go-runewidth
gopkg.in/cheggaaa/pb.v1
demo
&lt;/pre&gt;
&lt;p&gt;And finally run it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ ./bin/main
..
&lt;/pre&gt;
&lt;p&gt;Couple of points to summarize here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The third party package(s) are now in the &lt;tt class="docutils literal"&gt;vendor&lt;/tt&gt; sub-directory along with your package's source&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;vendor/manifest&lt;/tt&gt; file allows you to make sure that your dependencies are pinned to a certain version&lt;/li&gt;
&lt;li&gt;You don't need to worry about having your project in &lt;tt class="docutils literal"&gt;$GOPATH&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are to keen to learn more:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://golang.org/doc/code.html"&gt;How to Write Go Code&lt;/a&gt; document covers all I have discussed above and more&lt;/li&gt;
&lt;li&gt;Others in my &lt;a class="reference external" href="https://github.com/amitsaha/linux_voice_1"&gt;repository&lt;/a&gt; for an article I wrote on Go.&lt;/li&gt;
&lt;li&gt;Learn about &lt;a class="reference external" href="https://getgb.io/docs/project/"&gt;gb&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's all for now, you can find the simple source code above &lt;a class="reference external" href="https://github.com/amitsaha/golang_gettingstarted"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>QueueLogger and Python JSON Logger</title><link href="/queuelogger-and-python-json-logger.html" rel="alternate"></link><published>2017-02-27T15:00:00+10:00</published><updated>2017-02-27T15:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2017-02-27:/queuelogger-and-python-json-logger.html</id><summary type="html">&lt;div class="section" id="using-queuelogger-with-python-json-logger"&gt;
&lt;h2&gt;Using QueueLogger with Python JSON Logger&lt;/h2&gt;
&lt;p&gt;When logging from multiple processes (via &lt;tt class="docutils literal"&gt;multiprocessing&lt;/tt&gt; module),  using &lt;a class="reference external" href="https://pythonhosted.org/logutils/queue.html#logutils.queue.QueueHandler"&gt;QueueHandler&lt;/a&gt; is one  approach with Python 2.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;QueueHandler&lt;/tt&gt; however sets &lt;tt class="docutils literal"&gt;exc_info&lt;/tt&gt; attribute of a &lt;a class="reference external" href="https://docs.python.org/2/library/logging.html#logging.LogRecord"&gt;LogRecord&lt;/a&gt;
to &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; since it is not &amp;quot;pickleable&amp;quot; (more on this later). This becomes a problem when you use &lt;a class="reference external" href="https://github.com/madzak/python-json-logger/"&gt;python-json-logger&lt;/a&gt; to …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="using-queuelogger-with-python-json-logger"&gt;
&lt;h2&gt;Using QueueLogger with Python JSON Logger&lt;/h2&gt;
&lt;p&gt;When logging from multiple processes (via &lt;tt class="docutils literal"&gt;multiprocessing&lt;/tt&gt; module),  using &lt;a class="reference external" href="https://pythonhosted.org/logutils/queue.html#logutils.queue.QueueHandler"&gt;QueueHandler&lt;/a&gt; is one  approach with Python 2.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;QueueHandler&lt;/tt&gt; however sets &lt;tt class="docutils literal"&gt;exc_info&lt;/tt&gt; attribute of a &lt;a class="reference external" href="https://docs.python.org/2/library/logging.html#logging.LogRecord"&gt;LogRecord&lt;/a&gt;
to &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; since it is not &amp;quot;pickleable&amp;quot; (more on this later). This becomes a problem when you use &lt;a class="reference external" href="https://github.com/madzak/python-json-logger/"&gt;python-json-logger&lt;/a&gt; to format your logs as JSON since it relies on &lt;tt class="docutils literal"&gt;exc_info&lt;/tt&gt; being
&lt;a class="reference external" href="https://github.com/madzak/python-json-logger/blob/master/src/pythonjsonlogger/jsonlogger.py#L125"&gt;set&lt;/a&gt;.
The result is you don't get &lt;tt class="docutils literal"&gt;exc_info&lt;/tt&gt; in your logs. This is no however no longer true since this PR was merged.
&lt;a class="reference external" href="https://github.com/amitsaha/python-json-logging/blob/master/multi_processes_queue_logger/multi_process_json_logging.py"&gt;Sample Code&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="solution-1-modify-python-json-logger"&gt;
&lt;h3&gt;Solution #1: Modify Python JSON logger&lt;/h3&gt;
&lt;p&gt;The first solution is to look for &lt;tt class="docutils literal"&gt;exc_text&lt;/tt&gt; which is set by the standard
&lt;tt class="docutils literal"&gt;Formatter&lt;/tt&gt; class as per my &lt;a class="reference external" href="https://github.com/madzak/python-json-logger/pull/38/commits/ac42b205cc275fd0c226843f1dfd226695c09afd"&gt;PR&lt;/a&gt; and set that as the value of &lt;tt class="docutils literal"&gt;exc_info&lt;/tt&gt; which means at least we get the string representation of the traceback.
This PR is now merged.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution-2-subclass-queuehandler"&gt;
&lt;h3&gt;Solution #2: Subclass QueueHandler&lt;/h3&gt;
&lt;p&gt;The second solution is it to subclass &lt;tt class="docutils literal"&gt;logutils.queue.QueueHandler&lt;/tt&gt; as follows
and add pickling support for &lt;tt class="docutils literal"&gt;exc_info&lt;/tt&gt; via &lt;a class="reference external" href="https://github.com/ionelmc/python-tblib"&gt;tblib&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# Bring in support for serializing/deserializing tracebacks&lt;/span&gt;
&lt;span class="c1"&gt;# needed by QueueHandler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tblib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pickling_support&lt;/span&gt;
&lt;span class="n"&gt;pickling_support&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QueueHandlerWithTraceback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logutils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueueHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; QueueHandler with support for pickling/unpickling
        Tracebacks via tblib. We only override the prepare()
        method to *not* set `exc_info=None`
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;logutils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueueHandler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
        &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Instead of &lt;tt class="docutils literal"&gt;logutils.queue.QueueHandler&lt;/tt&gt;, we will then use &lt;tt class="docutils literal"&gt;QueueHandlerWithTraceback&lt;/tt&gt; instead
above (&lt;a class="reference external" href="https://github.com/amitsaha/python-json-logging/blob/master/multi_processes_queue_logger/multi_process_json_logging_tblib.py"&gt;Sample Code&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>Setup Golang on Fedora 24 (and other Linux distributions)</title><link href="/setup-golang-on-fedora-24-and-other-linux-distributions.html" rel="alternate"></link><published>2016-06-23T18:00:00+10:00</published><updated>2016-06-23T18:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2016-06-23:/setup-golang-on-fedora-24-and-other-linux-distributions.html</id><summary type="html">&lt;p&gt;This guide will be how I usually setup and get started with Go development environment on Linux. By the end of this document, we will have seen how to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install the Go compiler and other tools (&lt;tt class="docutils literal"&gt;gofmt&lt;/tt&gt;, for eaxmple), collectively referred to as go tools&lt;/li&gt;
&lt;li&gt;Setup Go workspace&lt;/li&gt;
&lt;li&gt;Working with …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This guide will be how I usually setup and get started with Go development environment on Linux. By the end of this document, we will have seen how to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install the Go compiler and other tools (&lt;tt class="docutils literal"&gt;gofmt&lt;/tt&gt;, for eaxmple), collectively referred to as go tools&lt;/li&gt;
&lt;li&gt;Setup Go workspace&lt;/li&gt;
&lt;li&gt;Working with Go programs using third-party packages&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="installing-go-tools"&gt;
&lt;h2&gt;Installing Go tools&lt;/h2&gt;
&lt;p&gt;The first option to install the Go compiler and other tools from your distro's package manager. On Fedora 24, you can do &lt;tt class="docutils literal"&gt;sudo dnf &lt;span class="pre"&gt;-y&lt;/span&gt; install golang&lt;/tt&gt; for example. This will install 1.6 version of the Go tools. However, if your distro's packaged version is behind the upstream release we can follow the official &lt;a class="reference external" href="https://golang.org/doc/install"&gt;install guide&lt;/a&gt; to get the latest stable version of the Go tools:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Download the Linux binary tarball from the &lt;a class="reference external" href="https://golang.org/dl/"&gt;Downloads page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;sudo tar &lt;span class="pre"&gt;-C&lt;/span&gt; /usr/local &lt;span class="pre"&gt;-xzf&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;filename-from-above&amp;gt;&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;export &lt;span class="pre"&gt;PATH=$PATH:/usr/local/go/bin&lt;/span&gt;&lt;/tt&gt; in your &lt;tt class="docutils literal"&gt;.bashrc&lt;/tt&gt; or similar file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we now open a new terminal session, we should be able to type in &lt;cite&gt;go version&lt;/cite&gt; and get the version we installed:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go version
go version go1.6.2 linux/amd64
&lt;/pre&gt;
&lt;p&gt;If we see this, we are all set to go to the next stage&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-the-go-workspace"&gt;
&lt;h2&gt;Setting up the Go workspace&lt;/h2&gt;
&lt;p&gt;Golang expects us to structure our source code in a certain way. You can read all about it in this &lt;a class="reference external" href="https://golang.org/doc/code.html"&gt;document&lt;/a&gt;. The summarized version is that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;All our go code (including those of packages we use) in a single directory&lt;/li&gt;
&lt;li&gt;The environment variable &lt;tt class="docutils literal"&gt;GOPATH&lt;/tt&gt; points to this single directory&lt;/li&gt;
&lt;li&gt;This single directory has three sub-directories: &lt;tt class="docutils literal"&gt;src&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;bin&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;pkg&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;It is in the &lt;tt class="docutils literal"&gt;src&lt;/tt&gt; sub-directory where all our Go code will live&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this guide I will assume that the &lt;tt class="docutils literal"&gt;GOPATH&lt;/tt&gt; is set to &lt;tt class="docutils literal"&gt;$HOME/work/golang&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ mkdir -p $HOME/work/golang
$ mkdir -p $HOME/work/golang/src $HOME/work/golang/bin $HOME/work/golang/pkg
&lt;/pre&gt;
&lt;p&gt;At this stage, our $GOPATH directory tree looks like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ tree -L 1 work/golang/
work/golang/
├── bin
├── pkg
└── src
&lt;/pre&gt;
&lt;p&gt;Next, we will add the line &lt;tt class="docutils literal"&gt;export &lt;span class="pre"&gt;GOPATH=$HOME/work/golang&lt;/span&gt;&lt;/tt&gt; in the &lt;tt class="docutils literal"&gt;.bashrc&lt;/tt&gt; (or another similar file). If we now start a new terminal session, we should see that &lt;tt class="docutils literal"&gt;GOPATH&lt;/tt&gt; is now setup correctly:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go env GOPATH
/home/asaha/work/golang
&lt;/pre&gt;
&lt;p&gt;You can learn more about GOPATH &lt;a class="reference external" href="https://golang.org/cmd/go/#hdr-GOPATH_environment_variable"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-our-first-program"&gt;
&lt;h2&gt;Writing our first program&lt;/h2&gt;
&lt;p&gt;There are two types of Golang programs we can write - one is an application program (output is an executable program) and the other is a package which is meant to be used in other programs. We will first write a program which will be compiled to an executable.&lt;/p&gt;
&lt;p&gt;First, create a directory tree in &lt;tt class="docutils literal"&gt;src&lt;/tt&gt; for our package:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ mkdir -p work/golang/src/github.com/amitsaha/golang_gettingstarted
&lt;/pre&gt;
&lt;p&gt;Our package name for the above directory tree becomes &lt;tt class="docutils literal"&gt;github.com/amitsaha/golang_gettingstarted&lt;/tt&gt;. Then, type in the following in &lt;tt class="docutils literal"&gt;work/golang/src/github.com/amitsaha/golang_gettingstarted/main.go&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
package main

import (
         &amp;quot;fmt&amp;quot;
)

func main() {
         fmt.Printf(&amp;quot;Hello World\n&amp;quot;)
}
&lt;/pre&gt;
&lt;p&gt;Next, build and run the program as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go run work/golang/src/github.com/amitsaha/golang_gettingstarted/main.go
Hello World
&lt;/pre&gt;
&lt;p&gt;Great! Our program compiled and ran successfully. Our workspace at this stage only has a single file - the one we created above:&lt;/p&gt;
&lt;p&gt;... code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ tree
.
├── bin
├── pkg
└── src
         └── github.com
                 └── amitsaha
                         └── golang_gettingstarted
                             └── main.go
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-go-applications"&gt;
&lt;h2&gt;Installing Go applications&lt;/h2&gt;
&lt;p&gt;Now, let's say that the program above was actually a utility we wrote and we want to use it regularly. Where as we could execute &lt;tt class="docutils literal"&gt;go run&lt;/tt&gt; as above, but the more convenient approach is to install the program. &lt;tt class="docutils literal"&gt;go install&lt;/tt&gt; command is used to build and install Go packages. Let's try it on our package:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go install github.com/amitsaha/golang_gettingstarted/
&lt;/pre&gt;
&lt;p&gt;You can execute this command from anywhere on your filesystem. Go will figure out the path to the package from GOPATH we set above. Now, you will see that there is a &lt;tt class="docutils literal"&gt;golang_gettingstarted&lt;/tt&gt; executable file in the &lt;tt class="docutils literal"&gt;$GOPATH/bin&lt;/tt&gt; directory:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ tree work/golang/
work/golang/
├── bin
│&amp;nbsp;&amp;nbsp; └── golang_gettingstarted
├── pkg
└── src
     └── github.com
         └── amitsaha
                └── golang_gettingstarted
                         └── main.go
&lt;/pre&gt;
&lt;p&gt;We can try executing the command:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ ./work/golang/bin/golang_gettingstarted
Hello World
&lt;/pre&gt;
&lt;p&gt;As a shortcut, we can just execute &lt;tt class="docutils literal"&gt;$GOPATH/bin/golang_gettingstarted&lt;/tt&gt;. But, you wouldn't need to even do that if &lt;tt class="docutils literal"&gt;$GOPATH/bin&lt;/tt&gt; is in your &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt;. So, if you want, you can do that and then you could just specify &lt;tt class="docutils literal"&gt;golang_gettingstarted&lt;/tt&gt; and the program would be executed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="working-with-third-party-packages"&gt;
&lt;h2&gt;Working with third-party packages&lt;/h2&gt;
&lt;p&gt;Let's now replace the &lt;tt class="docutils literal"&gt;main.go&lt;/tt&gt; file above by the example code from the package &lt;a class="reference external" href="https://github.com/cheggaaa/pb"&gt;pb&lt;/a&gt; which lets us create nice progress bars:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
package main

import (
     &amp;quot;gopkg.in/cheggaaa/pb.v1&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {
    count := 100000
    bar := pb.StartNew(count)
    for i := 0; i &amp;lt; count; i++ {
        bar.Increment()
        time.Sleep(time.Millisecond)
    }
    bar.FinishPrint(&amp;quot;The End!&amp;quot;)
}
&lt;/pre&gt;
&lt;p&gt;Let's try and install this package:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go install github.com/amitsaha/golang_gettingstarted
golang/src/github.com/amitsaha/golang_gettingstarted/main.go:6:5: cannot find package &amp;quot;gopkg.in/cheggaaa/pb.v1&amp;quot; in any of:
     /usr/lib/golang/src/gopkg.in/cheggaaa/pb.v1 (from $GOROOT)
     /home/asaha/work/golang/src/gopkg.in/cheggaaa/pb.v1 (from $GOPATH)
&lt;/pre&gt;
&lt;p&gt;Basically, this tells us that Go compiler is not able to find the package &lt;tt class="docutils literal"&gt;gopkg.in/cheggaaa/pb.v1&lt;/tt&gt;. So, let's get it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
  $ go get  gopkg.in/cheggaaa/pb.v1

This will download the package and place it in ``$GOPATH/src``:

.. code::

   $ tree -L 3 $GOPATH/src/
    /home/asaha/work/golang/src/
    ├── github.com
            │&amp;nbsp;&amp;nbsp; └── amitsaha
            │&amp;nbsp;&amp;nbsp;     └── golang_gettingstarted
    └── gopkg.in
            └── cheggaaa
                   └── pb.v1
&lt;/pre&gt;
&lt;p&gt;If we now install our package again, it will build correclty and an executable &lt;tt class="docutils literal"&gt;golang_gettingstarted&lt;/tt&gt; will be placed in &lt;tt class="docutils literal"&gt;$GOPATH/bin&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ go install github.com/amitsaha/golang_gettingstarted
$ $GOPATH/bin/golang_gettingstarted
 100000 / 100000 [======================================================================================================]100.00% 1m49s
 The End!
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="golang-package-objects"&gt;
&lt;h2&gt;Golang package objects&lt;/h2&gt;
&lt;p&gt;If we now display the directory contents of &lt;tt class="docutils literal"&gt;$GOPATH&lt;/tt&gt;, we will see:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ tree -L 2 golang/
golang/
    ├── bin
    │&amp;nbsp;&amp;nbsp;  └── golang_gettingstarted
    ├── pkg
    │&amp;nbsp;&amp;nbsp; └── linux_amd64
    └── src
        ├── github.com
        └── gopkg.in
&lt;/pre&gt;
&lt;p&gt;The contents in &lt;tt class="docutils literal"&gt;pkg&lt;/tt&gt; sub-directory are referred to as &lt;cite&gt;package objects&lt;/cite&gt; - basically built Golang packages. This is the difference from application programs (programs having &lt;tt class="docutils literal"&gt;package main&lt;/tt&gt;). This question from a while back on the golang-nuts group may be &lt;a class="reference external" href="https://groups.google.com/forum/m/#!topic/golang-nuts/RSd3B5_rIFE"&gt;interesting&lt;/a&gt; to read.&lt;/p&gt;
&lt;p&gt;If you are to keen to learn more:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://golang.org/doc/code.html"&gt;How to Write Go Code&lt;/a&gt; document covers all I have discussed above and more&lt;/li&gt;
&lt;li&gt;Others in my &lt;a class="reference external" href="https://github.com/amitsaha/linux_voice_1"&gt;repository&lt;/a&gt; for an article I wrote on Go.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's all for now, you can find the simple source code above &lt;a class="reference external" href="https://github.com/amitsaha/golang_gettingstarted"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Presentation slides with Jupyter Notebook</title><link href="/presentation-slides-with-jupyter-notebook.html" rel="alternate"></link><published>2016-05-31T22:00:00+10:00</published><updated>2016-05-31T22:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2016-05-31:/presentation-slides-with-jupyter-notebook.html</id><summary type="html">&lt;p&gt;I presented at the PyCon 2016 Education Summit on &amp;quot;Doing Math with Python&amp;quot; day before yesterday and a lightning talk yesterday. This is the first time, I prepared a &lt;a class="reference external" href="doingmathwithpython.github.io/pycon-us-2016"&gt;slide deck&lt;/a&gt; using Jupyter Notebook + Reveal.js. I was pleased with the content creation process and the end result. So, here …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I presented at the PyCon 2016 Education Summit on &amp;quot;Doing Math with Python&amp;quot; day before yesterday and a lightning talk yesterday. This is the first time, I prepared a &lt;a class="reference external" href="doingmathwithpython.github.io/pycon-us-2016"&gt;slide deck&lt;/a&gt; using Jupyter Notebook + Reveal.js. I was pleased with the content creation process and the end result. So, here is what worked for me.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please note that I have basically taken quite a bit of liberty with HTML where I didn't want to search for markdown way of doing something&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Basically, there are two steps:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create content in a Jupyter Notebook&lt;/li&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;jupyter-nbconvert&lt;/span&gt;&lt;/tt&gt; to convert the notebook to a HTML/JS based slide deck&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, I hosted the slide deck on GitHub pages.&lt;/p&gt;
&lt;p&gt;Please note that, you will need the latest version of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;jupyter-notebook&lt;/span&gt;&lt;/tt&gt; (4.2.0).&lt;/p&gt;
&lt;div class="section" id="quick-start-to-publish-your-slides-using-github-pages"&gt;
&lt;h2&gt;Quick start to publish your slides using GitHub pages&lt;/h2&gt;
&lt;p&gt;I have copied my &lt;em&gt;real&lt;/em&gt; slides to a repo along with a static copy of &amp;quot;reveal.js&amp;quot; (3.3.0) and a Bash script to automate it all. A good starting point then would  be to &lt;a class="reference external" href="https://github.com/amitsaha/jupyter-notebook-slides#fork-destination-box"&gt;fork&lt;/a&gt; my GitHub repo:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ git clone git&amp;#64;github.com:&amp;lt;your-user-name&amp;gt;/jupyter-notebook-slides.git
$ cd jupyter-notebook-slides
$ # Start notebook server
$ # Edit your slides

$ ./publish.sh
&lt;/pre&gt;
&lt;p&gt;Your slides should now be live at &lt;a class="reference external" href="http:/"&gt;http:/&lt;/a&gt;/&amp;lt;user-github-username&amp;gt;.github.io/jupyter-notebook-slides/&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="publish-sh-script"&gt;
&lt;h2&gt;publish.sh script&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;publish.sh&lt;/tt&gt; script is as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
#!/bin/bash

$ jupyter-nbconvert --to slides slides.ipynb --reveal-prefix=reveal.js
$ mv slides.slides.html  index.html
$ mkdir -p /tmp/workspace
$ cp -r * /tmp/workspace/
$ git add -A .
$ git commit -m &amp;quot;Update&amp;quot;
$ git checkout -B gh-pages
$ cp -r /tmp/workspace/* .
$ git add -A .
$ git commit -m &amp;quot;new version&amp;quot;
$ git push origin master gh-pages
$ git checkout master
$ rm -rf /tmp/workspace
&lt;/pre&gt;
&lt;p&gt;The part of the script above where I update the &lt;cite&gt;gh-pages&lt;/cite&gt; branch is of a quality where it does its job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="viewing-your-slides-locally"&gt;
&lt;h2&gt;Viewing your slides locally&lt;/h2&gt;
&lt;p&gt;To view your slides locally:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ jupyter-nbconvert --to slides slides.ipynb --reveal-prefix=reveal.js --post serve
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="understanding-what-s-going-on-in-brief"&gt;
&lt;h2&gt;Understanding what's going on in brief&lt;/h2&gt;
&lt;p&gt;The first step to do before you can start creating your slides is activate the &amp;quot;Slideshow&amp;quot; toolbar from the &amp;quot;View &amp;gt; Cell Toolbar menu&amp;quot;. Once you do that, each of your cells will have a drop down box, and you can select what the cell is. The options you will have are:  Slide, Sub-slide, Fragment, Skip and Notes.&lt;/p&gt;
&lt;p&gt;Like any other notebook, your &amp;quot;slides notebook&amp;quot; is also made up of cells. So, if you want a cell to be in your final slide deck, you will have to choose one of &amp;quot;Slide&amp;quot;, &amp;quot;Sub-slide&amp;quot; or &amp;quot;Fragment&amp;quot;. &amp;quot;Skip&amp;quot; will skip the cell from your final slide deck and cells marked with &amp;quot;Notes&amp;quot; will be visible in the &amp;quot;speaker mode&amp;quot; when you present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-related-posts-you-may-find-useful"&gt;
&lt;h2&gt;Other related posts you may find useful&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I think I found the CSS from &lt;a class="reference external" href="http://neuroscience.telenczuk.pl/?p=607"&gt;http://neuroscience.telenczuk.pl/?p=607&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for your work, Damián Avila and everyone else!&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>New article: Write a program to tee output using Rust</title><link href="/new-article-write-a-program-to-tee-output-using-rust.html" rel="alternate"></link><published>2016-05-04T14:00:00+10:00</published><updated>2016-05-04T14:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2016-05-04:/new-article-write-a-program-to-tee-output-using-rust.html</id><summary type="html">&lt;p&gt;My article &amp;quot;Write a program to tee output using Rust&amp;quot; is out in &lt;a class="reference external" href="https://linuxvoice.com"&gt;Linux
Voice&lt;/a&gt; (Issue 27).&lt;/p&gt;
&lt;p&gt;When I first set out to learning Rust, I really liked how the Rust programming language book
took the approach of introducing the language via &lt;a class="reference external" href="https://doc.rust-lang.org/stable/book/guessing-game.html"&gt;small projects&lt;/a&gt;. In a recent &amp;quot;New Rustacean&amp;quot; &lt;a class="reference external" href="http://www.newrustacean.com/show_notes/bonus/_4/index.html"&gt;bonus …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;My article &amp;quot;Write a program to tee output using Rust&amp;quot; is out in &lt;a class="reference external" href="https://linuxvoice.com"&gt;Linux
Voice&lt;/a&gt; (Issue 27).&lt;/p&gt;
&lt;p&gt;When I first set out to learning Rust, I really liked how the Rust programming language book
took the approach of introducing the language via &lt;a class="reference external" href="https://doc.rust-lang.org/stable/book/guessing-game.html"&gt;small projects&lt;/a&gt;. In a recent &amp;quot;New Rustacean&amp;quot; &lt;a class="reference external" href="http://www.newrustacean.com/show_notes/bonus/_4/index.html"&gt;bonus episode&lt;/a&gt;, Chris
Krycho urges &amp;quot;to build anything&amp;quot; in Rust while one is learning the
language. If you like both of those things, I think you will find my
article useful. In it, I aim to introduce the reader to the Rust
programming language by building a program which mimics the
functionality of the &lt;cite&gt;tee&lt;/cite&gt; program.&lt;/p&gt;
&lt;p&gt;I have updated the &lt;a class="reference external" href="https://github.com/amitsaha/linux_voice_2"&gt;GitHub repo&lt;/a&gt; with all the programs
discussed in the article.&lt;/p&gt;
&lt;p&gt;I hope you enjoy reading the article, and please feel free to get in
touch if you have any suggestions/comments/queries. I am &lt;cite&gt;&amp;#64;echorand&lt;/cite&gt;
on Twitter, or you can email me at &lt;cite&gt;amitsaha.in AT gmail.com&lt;/cite&gt;.&lt;/p&gt;
</content></entry><entry><title>runC and libcontainer on Fedora 23/24</title><link href="/runc-and-libcontainer-on-fedora-2324.html" rel="alternate"></link><published>2016-04-27T17:00:00+10:00</published><updated>2016-04-27T17:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2016-04-27:/runc-and-libcontainer-on-fedora-2324.html</id><summary type="html">&lt;p&gt;In this post, I will post my notes on how I got &lt;a class="reference external" href="https://github.com/opencontainers/runc/"&gt;runC&lt;/a&gt; and then using
&lt;cite&gt;libcontainer&lt;/cite&gt; on Fedora. The first step is to install &lt;tt class="docutils literal"&gt;golang&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo dnf -y install golang
$ go version
go version go1.6 linux/amd64
&lt;/pre&gt;
&lt;p&gt;We will set GOPATH=~/golang/ and then do the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ mkdir …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;In this post, I will post my notes on how I got &lt;a class="reference external" href="https://github.com/opencontainers/runc/"&gt;runC&lt;/a&gt; and then using
&lt;cite&gt;libcontainer&lt;/cite&gt; on Fedora. The first step is to install &lt;tt class="docutils literal"&gt;golang&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo dnf -y install golang
$ go version
go version go1.6 linux/amd64
&lt;/pre&gt;
&lt;p&gt;We will set GOPATH=~/golang/ and then do the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ mkdir -p ~/golang/github.com/opencontainers
$ cd ~/golang/github.com/opencontainers
$ git clone https://github.com/opencontainers/runc.git
$ cd runc

$ sudo dnf -y install libseccomp-devel
$ make
$ sudo make install
&lt;/pre&gt;
&lt;p&gt;At this stage, &lt;tt class="docutils literal"&gt;runc&lt;/tt&gt; should be installed and ready to use:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ runc --version
runc version 0.0.9
commit: 89ab7f2ccc1e45ddf6485eaa802c35dcf321dfc8
spec: 0.5.0-dev
&lt;/pre&gt;
&lt;p&gt;Now we need a rootfs that we will use for our container, we will use
the &amp;quot;busybox&amp;quot; docker image - pull it and export a tar archive:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo dnf -y install docker
$ sudo systemctl start docker
$ docker pull busybox
$ sudo docker export $(sudo docker create busybox) &amp;gt; busybox.tar
$ mkdir ~/rootfs
$ tar -C ~/rootfs -xf busybox.tar
&lt;/pre&gt;
&lt;p&gt;Now that we have a rootfs, we have one final step - generate the spec
for our container:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ runc spec
&lt;/pre&gt;
&lt;p&gt;This will generate a &lt;tt class="docutils literal"&gt;config.json&lt;/tt&gt; (&lt;a class="reference external" href="https://github.com/opencontainers/runtime-spec/blob/master/config.md"&gt;config&lt;/a&gt;)
file and then we can start a container using the rootfs above:
(runC expects to find &lt;tt class="docutils literal"&gt;config.json&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;rootfs&lt;/tt&gt; in the same
directory as you are going to start the container from)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# for some reason, i have to pass the absolute path to runc when using sudo
# UPDATE: (Thanks to Dharmit for pointingme to: http://unix.stackexchange.com/questions/91541/why-is-path-reset-in-a-sudo-command/91556#91556)
$ sudo /usr/local/bin/runc start test #  test is the &amp;quot;container-id&amp;quot;
/ # ps
     PID   USER     TIME   COMMAND
 1 root       0:00 sh
 8 root       0:00 ps
/# exit
&lt;/pre&gt;
&lt;div class="section" id="getting-started-with-libcontainer"&gt;
&lt;h2&gt;Getting started with libcontainer&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;runC&lt;/tt&gt; is built upon &lt;a class="reference external" href="https://github.com/opencontainers/runc/tree/master/libcontainer"&gt;libcontainer&lt;/a&gt;. This
means that wcan write our own Golang programs which will start a
container and do stuff in it. An example program is available &lt;a class="reference external" href="https://github.com/amitsaha/libcontainer_examples/blob/master/example1.go"&gt;here&lt;/a&gt;
(thanks to the fine folks on #opencontainers on Freenode for helpful
pointers). It starts a container using the above rootfs, runs &lt;tt class="docutils literal"&gt;ps&lt;/tt&gt;
in it and exits.&lt;/p&gt;
&lt;p&gt;Once you have saved it somewhere on your go path, we will first
need to get all the dependent packages:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ # My program is in the below directory
$ cd ~/golang/src/github.com/amitsaha/libcontainer_examples
$ go get
$ sudo GOPATH=/home/asaha/golang go run example1.go /home/asaha/rootfs/
 [sudo] password for asaha:
 PID   USER     TIME   COMMAND
 1 root       0:00 ps
&lt;/pre&gt;
&lt;p&gt;(Thanks Dharmit for all the suggestions)&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Webucator video: Python classes - basics beyond the absolute basics</title><link href="/webucator-video-python-classes-basics-beyond-the-absolute-basics.html" rel="alternate"></link><published>2016-04-17T14:00:00+10:00</published><updated>2016-04-17T14:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2016-04-17:/webucator-video-python-classes-basics-beyond-the-absolute-basics.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.webucator.com/"&gt;Webucator&lt;/a&gt; recently created a video based on my &lt;a class="reference external" href="http://echorand.me/site/notes/articles/python_custom_class/article.html"&gt;Python classes: basics beyond the absolute basics&lt;/a&gt; article.&lt;/p&gt;
&lt;p&gt;You can see the video on &lt;a class="reference external" href="https://www.youtube.com/watch?v=0slsoyEhz40&amp;amp;feature=youtu.be"&gt;YouTube&lt;/a&gt;  or here below:&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe src="https://www.youtube.com/embed/0slsoyEhz40" allowfullscreen seamless frameBorder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;I think they really did a great job with it and supplements my article well.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.webucator.com/"&gt;Webucator&lt;/a&gt; recently created a video based on my &lt;a class="reference external" href="http://echorand.me/site/notes/articles/python_custom_class/article.html"&gt;Python classes: basics beyond the absolute basics&lt;/a&gt; article.&lt;/p&gt;
&lt;p&gt;You can see the video on &lt;a class="reference external" href="https://www.youtube.com/watch?v=0slsoyEhz40&amp;amp;feature=youtu.be"&gt;YouTube&lt;/a&gt;  or here below:&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe src="https://www.youtube.com/embed/0slsoyEhz40" allowfullscreen seamless frameBorder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;I think they really did a great job with it and supplements my article well.&lt;/p&gt;
</content></entry><entry><title>New article: Write an Image Cropping program with Go</title><link href="/new-article-write-an-image-cropping-program-with-go.html" rel="alternate"></link><published>2016-04-17T10:00:00+10:00</published><updated>2016-04-17T10:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2016-04-17:/new-article-write-an-image-cropping-program-with-go.html</id><summary type="html">&lt;p&gt;My article &amp;quot;Write an Image Cropping with Go&amp;quot; is out in &lt;a class="reference external" href="https://linuxvoice.com"&gt;Linux Voice&lt;/a&gt; (Issue 26). It is my first article to be published in Linux Voice and I am very excited about it.&lt;/p&gt;
&lt;p&gt;It is challenging to write an introductory article without being able to explain everything the reader needs …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My article &amp;quot;Write an Image Cropping with Go&amp;quot; is out in &lt;a class="reference external" href="https://linuxvoice.com"&gt;Linux Voice&lt;/a&gt; (Issue 26). It is my first article to be published in Linux Voice and I am very excited about it.&lt;/p&gt;
&lt;p&gt;It is challenging to write an introductory article without being able to explain everything the reader needs to know so as to follow the article, while keeping the article concise. Therefore I have updated the &lt;a class="reference external" href="https://github.com/amitsaha/linux_voice_1"&gt;GitHub repo&lt;/a&gt; of the final code with a README which points you to various resources and tips I found useful while I was learning myself.&lt;/p&gt;
&lt;p&gt;Go is one of the two &amp;quot;new&amp;quot; languages I have been exploring (the other being Rust). What do I like about it?&lt;/p&gt;
&lt;div class="section" id="what-i-like-about-go"&gt;
&lt;h2&gt;What I like about Go?&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It is statically typed, but with type inference&lt;/li&gt;
&lt;li&gt;Rich standard library&lt;/li&gt;
&lt;li&gt;I like how it enforces code organization via &lt;a class="reference external" href="https://golang.org/doc/code.html#Workspaces"&gt;workspaces&lt;/a&gt;, no unused imports and &lt;a class="reference external" href="https://blog.golang.org/go-fmt-your-code"&gt;gofmt&lt;/a&gt; being the one and only way of formatting your code correctly.&lt;/li&gt;
&lt;li&gt;I didn't discuss &amp;quot;goroutines&amp;quot; and &amp;quot;channels&amp;quot; in the article. But finally, a programming language feature that have allowed me to write concurrent programs without having to look up the documentation&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.godoc.org"&gt;GoDoc&lt;/a&gt; is awesome&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.golang.org/examples"&gt;Testable examples in Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you enjoy reading the article, and please feel free to get in touch if you have any suggestions/comments/queries. I am &lt;cite&gt;&amp;#64;echorand&lt;/cite&gt; on Twitter, or you can email me at &lt;cite&gt;amitsaha.in AT gmail.com&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;In the next issue of Linux Voice, I have an article coming up on Rust.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Did your Fedora live cd build fail?</title><link href="/did-your-fedora-live-cd-build-fail.html" rel="alternate"></link><published>2016-02-17T11:00:00+10:00</published><updated>2016-02-17T11:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2016-02-17:/did-your-fedora-live-cd-build-fail.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Update: Changed the Koji URL to reflect the change to livemedia&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As the &lt;a class="reference external" href="http://fedora-scientific.readthedocs.org/en/latest/"&gt;Fedora Scientific&lt;/a&gt; maintainer, I
have to make sure I look into whether the nightly build is failing so
that I can look into the why. So far I have been doing that by going to the koji …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Update: Changed the Koji URL to reflect the change to livemedia&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As the &lt;a class="reference external" href="http://fedora-scientific.readthedocs.org/en/latest/"&gt;Fedora Scientific&lt;/a&gt; maintainer, I
have to make sure I look into whether the nightly build is failing so
that I can look into the why. So far I have been doing that by going to the koji &lt;a class="reference external" href="http://koji.fedoraproject.org/koji/tasks?state=all&amp;amp;view=tree&amp;amp;method=livemedia"&gt;url&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But I think there is a better way - make a program do it
regularly. First, the program (a Python script):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from lxml import html
import requests

def main():
   page = requests.get('http://koji.fedoraproject.org/koji/tasks?state=all&amp;amp;view=tree&amp;amp;method=livemedia')
   tree = html.fromstring(page.content)

   a_class_failed = tree.xpath('//a[&amp;#64;class=&amp;quot;taskfailed&amp;quot;]')
   for image in  a_class_failed:
   print image.text

if __name__ == '__main__':
   main()
&lt;/pre&gt;
&lt;p&gt;This incidentally happens to be my first scraping program and I got
the help I needed &lt;a class="reference external" href="http://docs.python-guide.org/en/latest/scenarios/scrape/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you install the &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;lxml&lt;/tt&gt; packages and run the
script, it will print the list of failing builds.&lt;/p&gt;
&lt;p&gt;Next step: I want to set this up regularly and send me an email. The
script is &lt;a class="reference external" href="https://github.com/amitsaha/fedora_livecd_build_failed/blob/master/failing_images.py"&gt;here&lt;/a&gt;.
As you can see, I have used &lt;a class="reference external" href="https://sendgrid.com/"&gt;sendgrid&lt;/a&gt; to
send myself the email using their  &lt;a class="reference external" href="https://github.com/sendgrid/sendgrid-python"&gt;Python library&lt;/a&gt;. So you will need to
get an API key to use this program. Before you can use the script,
please install the dependencies using &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt;
requirements.txt&lt;/tt&gt; preferably in it's own &lt;a class="reference external" href="http://python-packaging-user-guide.readthedocs.org/en/develop/using-a-virtualenv/"&gt;virtualenv&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I set this up in a cron job as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
0 8 * * * /home/asaha/.local/share/virtualenvs/koji_scraper/bin/python /home/asaha/work/koji_livecd_scraper/python/failing_images.py
&lt;/pre&gt;
&lt;p&gt;You will of course have to setup the path correctly for your setup. The script will send me an email every morning at 8 as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
livecd (rawhide, Fedora-Live-Workstation-x86_64-rawhide, fedora-live-workstation-db37b44.ks)

createLiveCD (rawhide, Fedora-Live-Workstation-x86_64-rawhide-20160216, fedora-live-workstation-db37b44.ks, x86_64)

livecd (rawhide, Fedora-Live-Workstation-i686-rawhide, fedora-live-workstation-db37b44.ks)

createLiveCD (rawhide, Fedora-Live-Workstation-i686-rawhide-20160216, fedora-live-workstation-db37b44.ks, i386)

livecd (rawhide, Fedora-Live-Scientific_KDE-x86_64-rawhide, fedora-live-scientific_kde-db37b44.ks)

createLiveCD (rawhide, Fedora-Live-Scientific_KDE-x86_64-rawhide-20160216, fedora-live-scientific_kde-db37b44.ks, x86_64)

livecd (rawhide, Fedora-Live-Scientific_KDE-i686-rawhide, fedora-live-scientific_kde-db37b44.ks)

createLiveCD (rawhide, Fedora-Live-Scientific_KDE-i686-rawhide-20160216, fedora-live-scientific_kde-db37b44.ks, i386)
&lt;/pre&gt;
&lt;p&gt;The GitHub repository for the code is available &lt;a class="reference external" href="https://github.com/amitsaha/fedora_livecd_build_failed"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Replacing boto S3 mocks using moto in Python</title><link href="/replacing-boto-s3-mocks-using-moto-in-python.html" rel="alternate"></link><published>2016-01-25T16:00:00+10:00</published><updated>2016-01-25T16:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2016-01-25:/replacing-boto-s3-mocks-using-moto-in-python.html</id><summary type="html">&lt;p&gt;Let's say you have some Python application code which connects to Amazon S3 which
retrieves the keys in a bucket. Very likely, the application would be
using &lt;a class="reference external" href="http://boto.cloudhackers.com/en/latest/s3_tut.html"&gt;boto&lt;/a&gt;
and the code would like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import boto

def get_s3_conn():
    return boto.connect_s3('&amp;lt;aws-access-key', '&amp;lt;aws-secret-key&amp;gt;')

def list_keys():
    s3_conn = get_s3_conn()
    b = s3_conn.get_bucket …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;Let's say you have some Python application code which connects to Amazon S3 which
retrieves the keys in a bucket. Very likely, the application would be
using &lt;a class="reference external" href="http://boto.cloudhackers.com/en/latest/s3_tut.html"&gt;boto&lt;/a&gt;
and the code would like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import boto

def get_s3_conn():
    return boto.connect_s3('&amp;lt;aws-access-key', '&amp;lt;aws-secret-key&amp;gt;')

def list_keys():
    s3_conn = get_s3_conn()
    b = s3_conn.get_bucket('bucket_name')
    keys = b.list()
    return keys
&lt;/pre&gt;
&lt;p&gt;The corresponding test would presumably use some &lt;a class="reference external" href="mock.readthedocs.org"&gt;mocks and patching&lt;/a&gt;. Here is one way to write a test for the
above code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# Assume the code above is in a module list_keys
# in a function list_keys

from list_keys import list_keys

from mock import patch, Mock

def test_list_keys():
   mocked_keys = [Mock(key='mykey1'), Mock(key='key2')]
   mocked_connection = Mock()
   # Start with patching connect_s3
   with patch('boto.connect_s3', Mock(return_value=mocked_connection)):
       mocked_bucket = Mock()
       # Mock get_bucket() call
       mocked_connection.get_bucket = Mock(return_value=mocked_bucket)
       # Mock the list() call to return the keys you want
       mocked_bucket.list = Mock(return_value=mocked_keys)
       keys = list_keys()

       assert keys == mocked_keys
&lt;/pre&gt;
&lt;p&gt;I thought I really had no other way to get around mocks and patches if
I wanted to test this part of my application. But, I discovered &lt;a class="reference external" href="https://github.com/spulec/moto"&gt;moto&lt;/a&gt;. Then life became easier.&lt;/p&gt;
&lt;p&gt;Using moto's S3 support, I don't need to worry about the mocking and
patching the boto calls any more. Here is the same test above, but
using moto:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from list_keys import get_s3_conn, list_keys
from moto import mock_s3

def test_list_keys():

    expected_keys = ['key1', 'key2']

    moto = mock_s3()
    # We enter &amp;quot;moto&amp;quot; mode using this
    moto.start()

    # Get the connection object
    conn = get_s3_conn()

    # Set up S3 as we expect it to be
    conn.create_bucket('bucket_name')
    for name in expected_keys:
        k = conn.get_bucket('bucket_name').new_key(name)
        k.set_contents_from_string('abcdedsd')

    # Now call the actual function
    keys = list_keys()
    assert expected_keys == [k.name for k in keys]

    # get out of moto mode
    moto.stop()
&lt;/pre&gt;
&lt;p&gt;Unless it is obvious, here are two major differences from the previous
test:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We don't mock or patch anything&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The point #1 above is the direct reason I would consider using moto
for testing S3 interactions rather than setting up mocks. This helps us in
the scenario in which this section of the code lies in another
package, not the one you are writing tests for currently. You can
actually call this section of the code and let the interaction with S3
happen as if it were interacting directly with Amazon S3. I think this
allows deeper penetration of your tests and as a result your code's
interactions with others.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The test code has to explicitly first setup the expected state&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This may seem like more work, but I think it still outweighs the
benefits as mentioned previously.&lt;/p&gt;
&lt;p&gt;Please checkout &lt;a class="reference external" href="https://github.com/spulec/moto"&gt;moto&lt;/a&gt; here.&lt;/p&gt;
&lt;p&gt;If you like this post, please follow &lt;a class="reference external" href="https://twitter.com/PythonTestTips"&gt;PythonTestTips&lt;/a&gt; on Twitter.&lt;/p&gt;
</content></entry><entry><title>tempfile.NamedTemporaryFile() in Python</title><link href="/tempfilenamedtemporaryfile-in-python.html" rel="alternate"></link><published>2016-01-20T11:00:00+10:00</published><updated>2016-01-20T11:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2016-01-20:/tempfilenamedtemporaryfile-in-python.html</id><summary type="html">&lt;p&gt;In Python, when you need to create a temporary file with a filename
associated to it on disk, &lt;a class="reference external" href="https://docs.python.org/2/library/tempfile.html#tempfile.TemporaryFile"&gt;NamedTemporaryFile&lt;/a&gt;
function in the &lt;tt class="docutils literal"&gt;tempfile&lt;/tt&gt; module is the goto function. Here are some use
cases that I think one might use it for.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Case #1: You simply need a named empty temporary …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In Python, when you need to create a temporary file with a filename
associated to it on disk, &lt;a class="reference external" href="https://docs.python.org/2/library/tempfile.html#tempfile.TemporaryFile"&gt;NamedTemporaryFile&lt;/a&gt;
function in the &lt;tt class="docutils literal"&gt;tempfile&lt;/tt&gt; module is the goto function. Here are some use
cases that I think one might use it for.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Case #1: You simply need a named empty temporary file&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You just want a file object (pointing to an &lt;em&gt;empty&lt;/em&gt; file) which has a
filename associated to it and hence you cannot use a &lt;a class="reference external" href="https://docs.python.org/2/library/stringio.html"&gt;StringIO&lt;/a&gt; object:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from tempfile import NamedTemporaryFile
f = NamedTemporaryFile()

# use f
..
&lt;/pre&gt;
&lt;p&gt;Once &lt;tt class="docutils literal"&gt;f&lt;/tt&gt; is garbage collected, or closed explicitly, the file will automatically be
removed from disk.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Case #2: You need a empty temporary file with a custom name&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You need a temporary file, but want to change the filename to
something you need:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from tempfile import NamedTemporaryFile
f = NamedTemporaryFile()

# Change the file name to something
f.name = 'myfilename.myextension'

# use f
&lt;/pre&gt;
&lt;p&gt;Since you change the name of the file, this file will automatically
&lt;em&gt;not&lt;/em&gt; be removed from disk when you close the file or the file object is
garbage collected. Hence, you will need to do so yourself:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from tempfile import NamedTemporaryFile
f = NamedTemporaryFile()

# Save original name (the &amp;quot;name&amp;quot; actually is the absolute path)
original_path = f.name

# Change the file name to something
f.name = 'myfilename.myextension'

# use f

..

# Remove the file
os.unlink(original_path)
assert not os.path.exists(original_path)
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Case #3: You need a temporary file, write some contents, read from it later&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This use case is where you need a temporary file, but you want to work
with it like a &amp;quot;normal&amp;quot; file on disk - write something to it and
later, read it from it. In other words, you just want to control when
the file gets removed from disk.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from tempfile import NamedTemporaryFile
# When delete=False is specified, this file will not be
# removed from disk automatically upon close/garbage collection
f = NamedTemporaryFile(delete=False)

# Save the file path
path = f.name

# Write something to it
f.write('Some random data')

# You can now close the file and later
# open and read it again
f.close()
data = open(path).read()

# do some work with the data

# Or, make a seek(0) call on the file object and read from it
# The file mode is by default &amp;quot;w+&amp;quot; which means, you can read from
# and write to it.
f.seek(0)
data = f.read()

# Close the file
f.close()

..

# Remove the file
os.unlink(path)
assert not os.path.exists(path)
&lt;/pre&gt;
&lt;p&gt;By default &lt;tt class="docutils literal"&gt;delete&lt;/tt&gt; is set to &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; when calling
&lt;tt class="docutils literal"&gt;NamedTemporaryFile()&lt;/tt&gt;, and thus setting it to &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; gives more
control on when the file gets removed from disk.&lt;/p&gt;
</content></entry><entry><title>Mock objects and non-existent attributes/methods in Python</title><link href="/mock-objects-and-non-existent-attributesmethods-in-python.html" rel="alternate"></link><published>2016-01-11T14:00:00+10:00</published><updated>2016-01-11T14:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2016-01-11:/mock-objects-and-non-existent-attributesmethods-in-python.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Updated&lt;/em&gt;: Fixed typo in the last paragraph.&lt;/p&gt;
&lt;p&gt;Today, I was curious to see this behavior of &lt;tt class="docutils literal"&gt;Mock()&lt;/tt&gt; objects when using &lt;a class="reference external" href="https://github.com/testing-cabal/mock"&gt;mock&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from mock import Mock
&amp;gt;&amp;gt;&amp;gt; m = Mock()
&amp;gt;&amp;gt;&amp;gt; m.i_dont_exist
&amp;lt;Mock name='mock.i_dont_exist' id='139841609578768'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; m.i_dont_exist()
&amp;lt;Mock name='mock.i_dont_exist()' id='139841609106896'&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The above is expected, since I have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Updated&lt;/em&gt;: Fixed typo in the last paragraph.&lt;/p&gt;
&lt;p&gt;Today, I was curious to see this behavior of &lt;tt class="docutils literal"&gt;Mock()&lt;/tt&gt; objects when using &lt;a class="reference external" href="https://github.com/testing-cabal/mock"&gt;mock&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from mock import Mock
&amp;gt;&amp;gt;&amp;gt; m = Mock()
&amp;gt;&amp;gt;&amp;gt; m.i_dont_exist
&amp;lt;Mock name='mock.i_dont_exist' id='139841609578768'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; m.i_dont_exist()
&amp;lt;Mock name='mock.i_dont_exist()' id='139841609106896'&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The above is expected, since I have not declared a spec when creating the &lt;tt class="docutils literal"&gt;Mock()&lt;/tt&gt; object, so even when you call a non-existent method or get/set a non-existent attribute, you will not get a &lt;tt class="docutils literal"&gt;AttributeError&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;However, I was suprised by the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; m.assert_not_calledd
Traceback (most recent call last):
 File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
File &amp;quot;/home/asaha/.local/share/virtualenvs/606fc8723c1a01b/lib/python2.7/site-packages/mock/mock.py&amp;quot;, line 721, in _    _getattr__
   raise AttributeError(name)
 AttributeError: assert_not_calledd
&lt;/pre&gt;
&lt;p&gt;And the following as well:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; m.assert_foo
Traceback (most recent call last):
File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
File &amp;quot;/home/asaha/.local/share/virtualenvs/606fc8723c1a01b/lib/python2.7/site-packages/mock/mock.py&amp;quot;, line 721, in __getattr__
  raise AttributeError(name)
  AttributeError: assert_foo
&lt;/pre&gt;
&lt;p&gt;I guessed that there is likely a check explicitly for &lt;strong&gt;non-existent
attributes&lt;/strong&gt; starting with &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt;, and if it finds so, it will
raise a &lt;tt class="docutils literal"&gt;AttributeError&lt;/tt&gt;.  If you look at the &lt;a class="reference external" href="https://github.com/testing-cabal/mock/blob/master/mock/mock.py#L708"&gt;__getattr__&lt;/a&gt;
method in &lt;tt class="docutils literal"&gt;mock.py&lt;/tt&gt;, you will see that this is pretty much what is
happening. The exact lines are below:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
if not self._mock_unsafe: # self._mock_unsafe is by default False
    if name.startswith(('assert', 'assret')): # It comes here and an AttributeError is raised
        raise AttributeError(name)
&lt;/pre&gt;
&lt;p&gt;This is certainly a good thing, since I have often seen
&lt;a class="reference external" href="http://engineeringblog.yelp.com/2015/02/assert_called_once-threat-or-menace.html"&gt;assert_called_once&lt;/a&gt;
in codebases, and is fairly easy to overlook.&lt;/p&gt;
</content></entry><entry><title>Data only Docker containers</title><link href="/data-only-docker-containers.html" rel="alternate"></link><published>2015-12-13T11:00:00+10:00</published><updated>2015-12-13T11:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2015-12-13:/data-only-docker-containers.html</id><summary type="html">&lt;p&gt;In this post, we shall take a look at the idea of data only
containers - containers whose sole purpose is to exist on the &lt;em&gt;docker
host&lt;/em&gt; so that other containers can have portable access to a
persistent data volume.&lt;/p&gt;
&lt;div class="section" id="why-do-we-need-a-persistent-data-volume"&gt;
&lt;h2&gt;Why do we need a persistent data volume?&lt;/h2&gt;
&lt;p&gt;We will experiment …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In this post, we shall take a look at the idea of data only
containers - containers whose sole purpose is to exist on the &lt;em&gt;docker
host&lt;/em&gt; so that other containers can have portable access to a
persistent data volume.&lt;/p&gt;
&lt;div class="section" id="why-do-we-need-a-persistent-data-volume"&gt;
&lt;h2&gt;Why do we need a persistent data volume?&lt;/h2&gt;
&lt;p&gt;We will experiment with the &lt;tt class="docutils literal"&gt;jenkins&lt;/tt&gt; image from the &lt;a class="reference external" href="https://hub.docker.com/_/jenkins/"&gt;docker
hub&lt;/a&gt;. Let's run a jenkins
container using &lt;cite&gt;$ sudo docker run -p 8080:8080 jenkins&lt;/cite&gt;. Now, if we
visit the URL &lt;cite&gt;http://docker-host-ip:8080&lt;/cite&gt;, we will see the familiar
Jenkins home page.&lt;/p&gt;
&lt;p&gt;By default, a Jenkins installation doesn't come with any
authentication configured. Hence, we will first setup a simple
authentication setup using Jenkins' own user password database. To do
so, we will visit the URL:
&lt;cite&gt;http://docker-host-ip:8080/configureSecurity/&lt;/cite&gt; and check the &lt;tt class="docutils literal"&gt;Enable
security&lt;/tt&gt; checkbox and then select the &lt;tt class="docutils literal"&gt;Jenkins&lt;/tt&gt; own user database`
option, and check the &lt;tt class="docutils literal"&gt;Allow users to sign up&lt;/tt&gt; check box under
&lt;tt class="docutils literal"&gt;Security Realm&lt;/tt&gt;, select the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Logged-in&lt;/span&gt; users can do anything&lt;/tt&gt;
option and finally click on &lt;tt class="docutils literal"&gt;Save&lt;/tt&gt;. This will bring us to the login
page from where we can create a new account since we don't have one
yet. Now, we will exit out of the container - we can use &lt;tt class="docutils literal"&gt;Ctrl + c&lt;/tt&gt;
combination for that. Now, if we restart the container using the
previous command, you will see that none of the configuration changes
above has been saved.&lt;/p&gt;
&lt;p&gt;The reason for that is because none of the changes we make during a
container's lifetime in it's own file system is preserved. So, we need
&lt;em&gt;data volumes&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="persistent-data-with-a-volume-mount"&gt;
&lt;h2&gt;Persistent data with a volume mount&lt;/h2&gt;
&lt;p&gt;If you look at the
&lt;a class="reference external" href="https://github.com/jenkinsci/docker/blob/master/Dockerfile"&gt;Dockerfile&lt;/a&gt;
you will see the command &lt;tt class="docutils literal"&gt;VOLUME /var/jenkins_home&lt;/tt&gt;. This
essentially means that the mount point &lt;tt class="docutils literal"&gt;/var/jenkins_home&lt;/tt&gt; points to
a location on the docker host. Hence, the changes made in that
directory will be available from the host even after you have exited
the container. However, the catch here is that every time you run a
new container, the host location it mounts to will change and hence as
we saw above, the data we wrote (via the configuration changes) were
not visible the next time we started a container from the same
image. To achieve that, we have to do things slightly differently. We
will start the container and give a name to it:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;`
$ sudo docker run &lt;span class="pre"&gt;-p&lt;/span&gt; 8080:8080 &lt;span class="pre"&gt;--name&lt;/span&gt; jenkins jenkins
`&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;We will perform the same configuration changes above and exit the
container using Ctrl + C. Next, we will &lt;tt class="docutils literal"&gt;start&lt;/tt&gt; the container using
&lt;tt class="docutils literal"&gt;sudo docker start jenkins&lt;/tt&gt;. You will see all your changes have been
preserved.&lt;/p&gt;
&lt;p&gt;So, now we have a setup of jenkins where our changes are preserved, so
long as we make sure we start/stop the containers and not run a new
container from the &lt;tt class="docutils literal"&gt;jenkins&lt;/tt&gt; image. The key point to take away from
here is that for a specific container, the host directory the volume
maps to is always the same. This leads to the use of what is commonly
referred to as &lt;tt class="docutils literal"&gt;data containers&lt;/tt&gt; for persistent data storage in
containers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-data-containers-for-persistent-storage"&gt;
&lt;h2&gt;Using data containers for persistent storage&lt;/h2&gt;
&lt;p&gt;The idea here is that you use the same base image from which your
actual container will run to only create a container (using &lt;tt class="docutils literal"&gt;docker
create&lt;/tt&gt;), not run it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo docker create --name jenkins-data jenkins
&lt;/pre&gt;
&lt;p&gt;We gave the name &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;jenkins-data&lt;/span&gt;&lt;/tt&gt; to this container and it's only
purpose is to be there on our filesystem to serve as a source of
persistent &lt;tt class="docutils literal"&gt;/var/jenkins_home&lt;/tt&gt; for other jenkins containers. Let's
run a jenkins container now:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo docker run --volumes-from jenkins-data -p 8080:8080 jenkins
&lt;/pre&gt;
&lt;p&gt;As earlier, we can now go to the Jenkins home page at
&lt;cite&gt;http://docker-host-ip:8080/configureSecurity/&lt;/cite&gt; and make the above
configuration changes. You can now exit the container and use the
above command to run another jenkins container. The changes will still
be visible. We are no more restricted to starting and stopping the
same container since our &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;jenkins-data&lt;/span&gt;&lt;/tt&gt; container will have all our
changes stored in its &lt;tt class="docutils literal"&gt;/var/jenkins_home&lt;/tt&gt;. You can have other
containers (perhaps a container for
&lt;a class="reference external" href="https://github.com/discordianfish/docker-lloyd"&gt;backing up&lt;/a&gt; your
&lt;tt class="docutils literal"&gt;/var/jenkins_home&lt;/tt&gt;) being able to access the same data by using the
same &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;volumes-from&lt;/span&gt;&lt;/tt&gt; option.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="comparison-to-volume-mounting-a-host-directory"&gt;
&lt;h2&gt;Comparison to volume mounting a host directory&lt;/h2&gt;
&lt;p&gt;The alternative to using data containers is to mount a directory from
the host as &lt;tt class="docutils literal"&gt;/var/jenkins_home&lt;/tt&gt; in the container. This approach will
solve our end-goal, but there are two additional steps that one would
need to do:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Decide which host location to use, perhaps creating it&lt;/li&gt;
&lt;li&gt;Making sure the container will have appropriate read-write permissions (including &lt;a class="reference external" href="www.projectatomic.io/blog/2015/06/using-volumes-with-docker-can-cause-problems-with-selinux/"&gt;SELinux
labels&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We don't need to do either of these when using data containers. As
long as the image we plan to use has the appropriate &lt;tt class="docutils literal"&gt;VOLUME&lt;/tt&gt;
command in it's Dockerfile, we can adopt the same approach we did
here to make sure the data we care about is persisted. For images,
which don't, we can easily enough create our own image and add the
appropriate &lt;tt class="docutils literal"&gt;VOLUME&lt;/tt&gt; commands. And hence, this is a &lt;strong&gt;portable&lt;/strong&gt;
approach to data persistence - it is not reliant on the host
setup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, these are the main reasons why data containers are a
good approach to have persistent storage for your containers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No requirement to setup host&lt;/li&gt;
&lt;li&gt;The permissions are automatically taken care of since we are using the same base image&lt;/li&gt;
&lt;li&gt;Multiple containers can easily have access to the same data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following links may be helpful to learn more:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.docker.com/userguide/dockervolumes/"&gt;Managing data in Containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;ramangupta/why-docker-data-containers-are-good-589b3c6c749e"&gt;Why Docker Data Containers are Good&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content></entry><entry><title>A virtualenv first approach to Python projects</title><link href="/a-virtualenv-first-approach-to-python-projects.html" rel="alternate"></link><published>2015-11-30T12:00:00+10:00</published><updated>2015-11-30T12:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2015-11-30:/a-virtualenv-first-approach-to-python-projects.html</id><summary type="html">&lt;p&gt;I have until the last few months (of my ~4 years of working with
Python) always worked without virtualenv for all my Python
projects. Why? I think I found the whole idea of having to do the
following two steps before I work on something cumbersome:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Remember the exact virtualenv …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I have until the last few months (of my ~4 years of working with
Python) always worked without virtualenv for all my Python
projects. Why? I think I found the whole idea of having to do the
following two steps before I work on something cumbersome:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Remember the exact virtualenv name, and then&lt;/li&gt;
&lt;li&gt;Activate it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That said, I was very much aware that it was certainly a good thing
to do and would cause me less headaches someday. That someday finally
came, and I ran into conflicting package requirements for applications
which needed to run simultaneously. This forced me to start using
virtualenvs. I think I also found the tool which will make me  keep
using them even when I don't &lt;em&gt;need&lt;/em&gt; to. The tool is &lt;a class="reference external" href="https://github.com/berdario/pew"&gt;pew&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="installation-and-basics"&gt;
&lt;h2&gt;Installation and Basics&lt;/h2&gt;
&lt;p&gt;The home page lists various options of installing &lt;tt class="docutils literal"&gt;pew&lt;/tt&gt;. The most
straightforward is of course to just use &lt;tt class="docutils literal"&gt;pip install pew&lt;/tt&gt;. Once you
have it installed, typing &lt;tt class="docutils literal"&gt;pew&lt;/tt&gt; lists the various sub-commands, such
as &lt;tt class="docutils literal"&gt;new&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;workon&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;ls&lt;/tt&gt; and others. Eac of the sub-commands is
accompanied by a summary of they will do.&lt;/p&gt;
&lt;p&gt;So far, I have been mostly working with the above sub-commands. Here
is how we can create a new virtualenv:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ pew new flask-graphql-demo
New python executable in flask-graphql-demo/bin/python2
Also creating executable in flask-graphql-demo/bin/python
Installing setuptools, pip...done.
Launching subshell in virtual environment. Type 'exit' or 'Ctrl+D' to return.
flask-graphql-demo $
&lt;/pre&gt;
&lt;p&gt;Our virtualenv &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;flask-graphql-demo&lt;/span&gt;&lt;/tt&gt; is created and we are in it, which we can check:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ which pip
~/.local/share/virtualenvs/flask-graphql-demo/bin/pip
&lt;/pre&gt;
&lt;p&gt;We can do all our usual work now (installing other packages, running
our applications) and once done, we can simply &lt;tt class="docutils literal"&gt;exit&lt;/tt&gt; and we will be
out of the virtualenv.&lt;/p&gt;
&lt;p&gt;Now, if I want to resume work on this particular project, I can first
use &lt;tt class="docutils literal"&gt;pew ls&lt;/tt&gt; to list the currently created virtualenvs:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ pew ls
flask-graphql-demo
&lt;/pre&gt;
&lt;p&gt;and then use &lt;tt class="docutils literal"&gt;pew workon &lt;span class="pre"&gt;flask-graphql-demo&lt;/span&gt;&lt;/tt&gt; to start working on it
again. On Linux, &lt;tt class="docutils literal"&gt;pew workon&lt;/tt&gt; also gives me all the available
virtualenvs as suggestions automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As you may have already seen, &lt;tt class="docutils literal"&gt;pew&lt;/tt&gt; has a number of other features
which should make working with &lt;tt class="docutils literal"&gt;virtualenvs&lt;/tt&gt; really easy. It has
definitely made me change my approach to working on Python projects.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>PYTHONHASHSEED and your tests</title><link href="/pythonhashseed-and-your-tests.html" rel="alternate"></link><published>2015-11-19T11:00:00+10:00</published><updated>2015-11-19T11:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2015-11-19:/pythonhashseed-and-your-tests.html</id><summary type="html">&lt;p&gt;Recently at work, I wanted to test a string which was being created by the &lt;tt class="docutils literal"&gt;urllib.urlencode()&lt;/tt&gt; function. My first attempt was simple - test my expected string with that being created by the function above using unittest's &lt;tt class="docutils literal"&gt;assertEquals()&lt;/tt&gt; function. It passed all the times I ran the tests before I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently at work, I wanted to test a string which was being created by the &lt;tt class="docutils literal"&gt;urllib.urlencode()&lt;/tt&gt; function. My first attempt was simple - test my expected string with that being created by the function above using unittest's &lt;tt class="docutils literal"&gt;assertEquals()&lt;/tt&gt; function. It passed all the times I ran the tests before I committed the code, but it started failing when the tests were ran as part of the deployment process.&lt;/p&gt;
&lt;p&gt;The input to the &lt;tt class="docutils literal"&gt;urllib.urlencode()&lt;/tt&gt; function is a dictionary of key value pairs and hence the returned value can really be any of the arrangements of the key value pairs. So, for example &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{'key1':'value',&lt;/span&gt; &lt;span class="pre"&gt;'key2':'value'}&lt;/span&gt;&lt;/tt&gt; can result in the query string &lt;tt class="docutils literal"&gt;key1=value&amp;amp;key2=value&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;key2=value&amp;amp;key1=value&lt;/tt&gt;. We cannot know for sure and we shouldn't need to.&lt;/p&gt;
&lt;p&gt;Thus, we cannot use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;self.assertEquals(urllib.urlencode({'key1':'value',&lt;/span&gt; &lt;span class="pre"&gt;{'key2':'value'}),&lt;/span&gt; 'key1=value&amp;amp;key2=value')&lt;/tt&gt; without the possibility that it will fail eventually. The reason why we see such behaviour of course is that for dictionaries, the order in which the keys are stored is not deterministic - or known apriori. You can see this behaviour by explicitly setting the value of &lt;a class="reference external" href="https://docs.python.org/3.3/using/cmdline.html#envvar-PYTHONHASHSEED"&gt;PYTHONHASHSEED&lt;/a&gt; to different values.&lt;/p&gt;
&lt;p&gt;So, how should we write such tests? Let's see one possible way which I will state as - &lt;strong&gt;Instead of asserting the equality of entire objects, we should be testing for the presence of the expected constituent objects&lt;/strong&gt;. I demonstrate it via two similar examples:&lt;/p&gt;
&lt;p&gt;(Note that I have used the builtin &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement to test here)&lt;/p&gt;
&lt;div class="section" id="url-encoding-via-urllib-urlencode"&gt;
&lt;h2&gt;URL encoding via urllib.urlencode()&lt;/h2&gt;
&lt;p&gt;As our first example, let's consider the &lt;tt class="docutils literal"&gt;urllib.urlencode()&lt;/tt&gt; function:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
 # Test for the role of PYTHONHASHSEED - urllib urlencode

import urllib
urlencode_input = {'param1': 'value', 'param2': 'value'}
expected_query_string = 'param1=value&amp;amp;param2=value'

# This will fail for *some* PYTHONHASHSEED
def test_urlencode_1():
    assert urllib.urlencode(urlencode_input) == expected_query_string

# This will not fail for *any* PYTHONHASHSEED
def test_urlencode_2():
    query_string = urllib.urlencode(urlencode_input)
    assert 'param1=value' in query_string
    assert 'param2=value' in query_string
&lt;/pre&gt;
&lt;p&gt;Run the above tests a few times each starting with a different value of &lt;tt class="docutils literal"&gt;PYTHONHASHEED&lt;/tt&gt; (for. e.g on Linux/Mac OS X, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;PYTHONHASHSEED=&amp;lt;some&lt;/span&gt; integer&amp;gt; nosetests&lt;/tt&gt;) and you will be easily able to see that the first test will fail for some value, but the second test will always pass.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="joining-strings-from-dictionaries"&gt;
&lt;h2&gt;Joining strings from dictionaries&lt;/h2&gt;
&lt;p&gt;This is similar to the previous example. Assume a function below which basically concatenates multiple key value pairs to create the conditional part of a SQL &lt;tt class="docutils literal"&gt;WHERE&lt;/tt&gt; clause:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def create_where_clause(conditions):
    where_clause = ''
    for k, v in conditions.iteritems():
        where_clause += '%s=%s AND ' % (k, v)
    # remove the last AND and a trailing space
    return where_clause[:-5]
&lt;/pre&gt;
&lt;p&gt;Here are two ways of testing this function - the first will fail for some test run, where as the second will not:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# This will fail for *some* PYTHONHASHSEED
def test_where_clause_1():

    where_clause = create_where_clause({'item1': 1, 'item2': 2})
    expected_where_clause = 'item1=1 AND item2=2'
    assert where_clause==expected_where_clause

# This will not fail for *any* PYTHONHASHSEED
def test_where_clause_2():

    where_clause = create_where_clause({'item1': 1, 'item2': 2})

    # Deconstruct the string returned into individual conditions
    conditions = [cond.strip() for cond in where_clause.split('AND')]
    assert 'item1=1' in conditions
    assert 'item2=2' in conditions
&lt;/pre&gt;
&lt;p&gt;If you run the above tests with different &lt;tt class="docutils literal"&gt;PYTHONHASHSEED&lt;/tt&gt; values, you will notice similar behaviour to the previous example.&lt;/p&gt;
&lt;p&gt;If you are using &lt;a class="reference external" href="https://testrun.org/tox/latest/example/basic.html#special-handling-of-pythonhashseed"&gt;tox&lt;/a&gt; to run your tests, it automatically sets &lt;tt class="docutils literal"&gt;PYTHONHASHSEED&lt;/tt&gt; to a random integer when it is invoked. Hence, if you have never had your tests fail so far, there is a good chance your tests do not make any assumptions of order when dealing with Python dictionaries - but that of course is no guarantee that your tests are completely free since there may be this particular random number that has not been tried yet! So, ideally you may just want to do run your tests (especially if they don't take long) for a large number of PYTHONHASHSEED values just to be more confident.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Mounting a docker volume on SELinux enabled host</title><link href="/mounting-a-docker-volume-on-selinux-enabled-host.html" rel="alternate"></link><published>2015-10-05T11:00:00+10:00</published><updated>2015-10-05T11:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2015-10-05:/mounting-a-docker-volume-on-selinux-enabled-host.html</id><summary type="html">&lt;p&gt;My workflow with docker usually involves volume mounting a host
directory so that I can read and write to the host directory from my
container as a &lt;em&gt;non-root&lt;/em&gt; user. On a Fedora 23 host with SELinux
enabled, this is what I have to do differently:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Use: -v /var/dir1:var …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;My workflow with docker usually involves volume mounting a host
directory so that I can read and write to the host directory from my
container as a &lt;em&gt;non-root&lt;/em&gt; user. On a Fedora 23 host with SELinux
enabled, this is what I have to do differently:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Use: -v /var/dir1:var/dir1:Z
&lt;/pre&gt;
&lt;p&gt;Note the extra Z above? You can learn more about it this
&lt;a class="reference external" href="http://www.projectatomic.io/blog/2015/06/using-volumes-with-docker-can-cause-problems-with-selinux/"&gt;Project Atomic blog post&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>Standalone open source puppet setup on Fedora</title><link href="/standalone-open-source-puppet-setup-on-fedora.html" rel="alternate"></link><published>2015-10-01T14:54:00+10:00</published><updated>2015-10-01T14:54:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2015-10-01:/standalone-open-source-puppet-setup-on-fedora.html</id><summary type="html">&lt;p&gt;My goal in this post is to show how to setup puppet in standalone mode on a Fedora 23 system. This setup will allow writing puppet modules and then you can apply them on your local system and check manually and via serverspec tests that they are doing what you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My goal in this post is to show how to setup puppet in standalone mode on a Fedora 23 system. This setup will allow writing puppet modules and then you can apply them on your local system and check manually and via serverspec tests that they are doing what you intend them to be doing. Obviously, a VM would be the best test environment for this, or even a container. Let's get started.&lt;/p&gt;
&lt;div class="section" id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Install &lt;tt class="docutils literal"&gt;puppet&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# dnf -y install puppet
&lt;/pre&gt;
&lt;p&gt;Setup the host name:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# cat /etc/hostname
fedora-23.node
&lt;/pre&gt;
&lt;p&gt;Reboot, verify:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# facter | grep node
domain =&amp;gt; node
fqdn =&amp;gt; fedora-23.node
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="our-first-manifest"&gt;
&lt;h2&gt;Our First manifest&lt;/h2&gt;
&lt;p&gt;Let's write our first manifest. We will place it in &lt;tt class="docutils literal"&gt;/etc/puppet/manifests&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Upon installation, &lt;tt class="docutils literal"&gt;/etc/puppet&lt;/tt&gt; looks like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# tree /etc/puppet/
/etc/puppet/
 ├── auth.conf
 ├── modules
 └── puppet.conf
&lt;/pre&gt;
&lt;p&gt;We will create a &lt;tt class="docutils literal"&gt;manifests&lt;/tt&gt; sub-directory:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# mkdir /etc/puppet/manifests
&lt;/pre&gt;
&lt;p&gt;Now, we will create our first manifest &lt;tt class="docutils literal"&gt;/etc/puppet/manifests/nginx.pp&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
node &amp;quot;fedora-23.node&amp;quot; {
   package { &amp;quot;nginx&amp;quot;:
     ensure =&amp;gt; installed
   }
}
&lt;/pre&gt;
&lt;p&gt;Apply with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--noop&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# puppet apply nginx.pp --noop
Notice: Compiled catalog for fedora-23.node in environment production in 0.66 seconds
Notice: /Stage[main]/Main/Node[fedora-23.node]/Package[nginx]/ensure: current_value purged, should be present (noop)
Notice: Node[fedora-23.node]: Would have triggered 'refresh' from 1 events
Notice: Class[Main]: Would have triggered 'refresh' from 1 events
Notice: Stage[main]: Would have triggered 'refresh' from 1 events
Notice: Applied catalog in 0.26 seconds
&lt;/pre&gt;
&lt;p&gt;Really apply:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# puppet apply nginx.pp
Notice: Compiled catalog for fedora-23.node in environment production in 0.60 seconds
Notice: /Stage[main]/Main/Node[fedora-23.node]/Package[nginx]/ensure: created
Notice: Applied catalog in 5.67 seconds
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
# rpm -q nginx
nginx-1.8.0-13.fc23.x86_64
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-serverspec-tests"&gt;
&lt;h2&gt;Writing serverspec tests&lt;/h2&gt;
&lt;p&gt;We will first install &lt;tt class="docutils literal"&gt;bundler&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
dnf -y install rubygem-bundler
&lt;/pre&gt;
&lt;p&gt;We will put our serverspec test in &lt;tt class="docutils literal"&gt;/etc/puppet/manifests/tests&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# mkdir /etc/puppet/manifests/tests
# cd /etc/puppet/manifests/tests
&lt;/pre&gt;
&lt;p&gt;Create a &lt;tt class="docutils literal"&gt;Gemfile&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# cat Gemfile
source 'https://rubygems.org'

gem 'serverspec'
gem 'rake'
&lt;/pre&gt;
&lt;p&gt;Install the gems:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# bundle  install --path ./gems/
Installing rake 10.4.2
Installing diff-lcs 1.2.5
Installing multi_json 1.11.2
Installing net-ssh 2.9.2
Installing net-scp 1.2.1
Installing net-telnet 0.1.1
Installing rspec-support 3.3.0
Installing rspec-core 3.3.2
Installing rspec-expectations 3.3.1
Installing rspec-mocks 3.3.2
Installing rspec 3.3.0
Installing rspec-its 1.2.0
Installing sfl 2.2
Installing specinfra 2.43.10
Installing serverspec 2.24.1
Using bundler 1.7.8
Your bundle is complete!
It was installed into ./gems
&lt;/pre&gt;
&lt;p&gt;Initialize the serverspec directory tree:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# bundle exec serverspec-init

Select OS type:

1) UN*X
2) Windows

Select number: 1

Select a backend type:

1) SSH
2) Exec (local)

Select number: 2

+ spec/
+ spec/localhost/
+ spec/localhost/sample_spec.rb
+ spec/spec_helper.rb
+ Rakefile
+ .rspec
&lt;/pre&gt;
&lt;p&gt;Time to write our test in &lt;tt class="docutils literal"&gt;spec/localhost/nginx_spec.rb&lt;/tt&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code literal-block"&gt;
require 'spec_helper'
describe package('nginx') do
    it { should be_installed }
end
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's run our test:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# bundle exec rake spec
/usr/bin/ruby -I/etc/puppet/manifests/tests/gems/ruby/gems/rspec-core-3.3.2/lib:/etc/puppet/manifests/tests/gems   /ruby/gems/rspec-support-3.3.0/lib /etc/puppet/manifests/tests/gems/ruby/gems/rspec-core-3.3.2/exe/rspec --pattern spec/localhost/\*_spec.rb

Package &amp;quot;nginx&amp;quot;
should be installed

Finished in 0.03447 seconds (files took 0.17465 seconds to load)
1 example, 0 failures
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="our-first-module"&gt;
&lt;h2&gt;Our first module&lt;/h2&gt;
&lt;p&gt;We will now write our first puppet module, we will name it &lt;tt class="docutils literal"&gt;nginx&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# tree modules/nginx/
modules/nginx/
└── manifests
   ├── config
   │&amp;nbsp;&amp;nbsp; ├── config1.pp
   │&amp;nbsp;&amp;nbsp; └── config.pp
   └── init.pp
&lt;/pre&gt;
&lt;p&gt;Create &lt;tt class="docutils literal"&gt;modules/nginx/manifests/init.pp&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# modules/nginx/manifests/init.pp

class nginx {
   package { &amp;quot;nginx&amp;quot;:
      ensure =&amp;gt; installed
   }

   include nginx::config::config
}
&lt;/pre&gt;
&lt;p&gt;Create &lt;tt class="docutils literal"&gt;modules/nginx/manifests/config/config.pp&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# modules/nginx/manifests/config/config.pp
class nginx::config::config{

file { '/etc/nginx/nginx.conf':
    ensure  =&amp;gt; present,
 }
 include nginx::config::config1
}
&lt;/pre&gt;
&lt;p&gt;Create &lt;tt class="docutils literal"&gt;modules/nginx/manifests/config/config1.pp&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# modules/nginx/manifests/config/config1.pp
class nginx::config::config1{
  file { '/etc/nginx/conf.d':
     ensure  =&amp;gt; directory,
  }
}
&lt;/pre&gt;
&lt;p&gt;Let's write a manifest to include this module:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# cat manifests/use-nginx-module.pp
include nginx
&lt;/pre&gt;
&lt;p&gt;Remove &lt;tt class="docutils literal"&gt;nginx&lt;/tt&gt; and appy the manifest above:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
 # dnf remove nginx

 # puppet apply manifests/use-nginx-module.pp --noop
Notice: Compiled catalog for fedora-23.node in environment production in 0.61 seconds
Notice: /Stage[main]/Nginx/Package[nginx]/ensure: current_value purged, should be present (noop)
Notice: Class[Nginx]: Would have triggered 'refresh' from 1 events
Notice: /Stage[main]/Nginx::Config::Config/File[/etc/nginx/nginx.conf]/ensure: current_value absent, should be   present (noop)
Notice: Class[Nginx::Config::Config]: Would have triggered 'refresh' from 1 events
Notice: /Stage[main]/Nginx::Config::Config1/File[/etc/nginx/conf.d]/ensure: current_value absent, should be directory (noop)
Notice: Class[Nginx::Config::Config1]: Would have triggered 'refresh' from 1 events
Notice: Stage[main]: Would have triggered 'refresh' from 3 events
Notice: Applied catalog in 0.24 seconds
&lt;/pre&gt;
&lt;p&gt;And we are done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="miscellaneous"&gt;
&lt;h2&gt;Miscellaneous&lt;/h2&gt;
&lt;p&gt;Use &lt;tt class="docutils literal"&gt;puppet parser&lt;/tt&gt; to validate your manifest:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ puppet parser validate nginx.pp
&lt;/pre&gt;
&lt;p&gt;Print current module path:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ puppet config print modulepath
/etc/puppet/modules
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.puppetlabs.com/references/latest/type.html#package"&gt;https://docs.puppetlabs.com/references/latest/type.html#package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-install-puppet-in-standalone-mode-on-centos-7"&gt;https://www.digitalocean.com/community/tutorials/how-to-install-puppet-in-standalone-mode-on-centos-7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://serverspec.org/tutorial.html"&gt;http://serverspec.org/tutorial.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.debian-administration.org/article/703/A_brief_introduction_to_server-testing_with_serverspec"&gt;https://www.debian-administration.org/article/703/A_brief_introduction_to_server-testing_with_serverspec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Advanced serverspec tips: &lt;a class="reference external" href="http://serverspec.org/advanced_tips.html"&gt;http://serverspec.org/advanced_tips.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content></entry><entry><title>Fedora 22 Scientific</title><link href="/fedora-22-scientific.html" rel="alternate"></link><published>2015-06-11T10:20:00+10:00</published><updated>2015-06-11T10:20:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2015-06-11:/fedora-22-scientific.html</id><summary type="html">&lt;p&gt;Fedora 22 was &lt;a class="reference external" href="http://fedoramagazine.org/fedora-22-released/"&gt;released recently&lt;/a&gt; which also means we
have a new Fedora Scientific release. &lt;a class="reference external" href="https://labs.fedoraproject.org/en/scientific/"&gt;Fedora Scientific&lt;/a&gt;
is now part of &lt;a class="reference external" href="http://fedoramagazine.org/new-websites-fedora-22/"&gt;Fedora labs&lt;/a&gt;.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://labs.fedoraproject.org/en/scientific/"&gt;&lt;img alt="Featured Applications Image" class="align-center" src="/images/scientific-featured-applications.png" style="width: 650.0px; height: 550.0px;" /&gt;&lt;/a&gt;
&lt;p&gt;As you can see, the new home for Fedora Scientific looks
amazing. The &amp;quot;Featured Applications&amp;quot; section features the most
important and useful tools in Fedora Scientific. I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Fedora 22 was &lt;a class="reference external" href="http://fedoramagazine.org/fedora-22-released/"&gt;released recently&lt;/a&gt; which also means we
have a new Fedora Scientific release. &lt;a class="reference external" href="https://labs.fedoraproject.org/en/scientific/"&gt;Fedora Scientific&lt;/a&gt;
is now part of &lt;a class="reference external" href="http://fedoramagazine.org/new-websites-fedora-22/"&gt;Fedora labs&lt;/a&gt;.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://labs.fedoraproject.org/en/scientific/"&gt;&lt;img alt="Featured Applications Image" class="align-center" src="/images/scientific-featured-applications.png" style="width: 650.0px; height: 550.0px;" /&gt;&lt;/a&gt;
&lt;p&gt;As you can see, the new home for Fedora Scientific looks
amazing. The &amp;quot;Featured Applications&amp;quot; section features the most
important and useful tools in Fedora Scientific. I think that is a
great idea. Everyone associated with it, thank you very much.&lt;/p&gt;
&lt;p&gt;I have also updated the &lt;a class="reference external" href="http://fedora-scientific.readthedocs.org/"&gt;Fedora Scientific Guide&lt;/a&gt; to reflect the
changes.&lt;/p&gt;
</content></entry><entry><title>Remapping http://echorand.me</title><link href="/remapping-httpechorandme.html" rel="alternate"></link><published>2015-04-30T10:20:00+10:00</published><updated>2015-04-30T10:20:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:None,2015-04-30:/remapping-httpechorandme.html</id><summary type="html">&lt;p&gt;I changed the mapping of my domain to point to my GitHub pages. My old
blog content is still available &lt;a class="reference external" href="http://amitksaha.wordpress.com"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I changed the mapping of my domain to point to my GitHub pages. My old
blog content is still available &lt;a class="reference external" href="http://amitksaha.wordpress.com"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content></entry></feed>