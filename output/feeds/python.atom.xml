<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Programming and Writing about it - Python</title><link href="http://echorand.me/" rel="alternate"></link><link href="http://echorand.me/feeds/python.atom.xml" rel="self"></link><id>http://echorand.me/</id><updated>2017-10-26T13:00:00+10:00</updated><entry><title>Getting started with gRPC and Python</title><link href="http://echorand.me/getting-started-with-grpc-and-python.html" rel="alternate"></link><published>2017-10-26T13:00:00+10:00</published><updated>2017-10-26T13:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:echorand.me,2017-10-26:/getting-started-with-grpc-and-python.html</id><summary type="html">&lt;p&gt;My article on getting started with gRPC in Python is up on the codeship blog:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.codeship.com/using-grpc-in-python/"&gt;Using gRPC in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The demos can be found in the &lt;a href="https://github.com/amitsaha/python-grpc-demo"&gt;python-grpc-demo&lt;/a&gt; repository.&lt;/p&gt;</summary><content type="html">&lt;p&gt;My article on getting started with gRPC in Python is up on the codeship blog:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.codeship.com/using-grpc-in-python/"&gt;Using gRPC in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The demos can be found in the &lt;a href="https://github.com/amitsaha/python-grpc-demo"&gt;python-grpc-demo&lt;/a&gt; repository.&lt;/p&gt;</content></entry><entry><title>Monitoring Python applications with Prometheus</title><link href="http://echorand.me/monitoring-python-applications-with-prometheus.html" rel="alternate"></link><published>2017-10-26T13:00:00+10:00</published><updated>2017-10-26T13:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:echorand.me,2017-10-26:/monitoring-python-applications-with-prometheus.html</id><summary type="html">&lt;p&gt;I recently wrote two articles on Python application monitoring with Prometheus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.codeship.com/monitoring-your-synchronous-python-web-applications-using-prometheus/"&gt;Monitoring Your Synchronous Python Web Applications Using Prometheus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.codeship.com/monitoring-your-asynchronous-python-web-applications-using-prometheus/"&gt;Monitoring Your Asynchronous Python Web Applications Using Prometheus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The demos can be found in the &lt;a href="https://github.com/amitsaha/python-prometheus-demo"&gt;python-prometheus-demo&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;Also checkout &lt;a href="https://github.com/amitsaha/aiohttp-prometheus"&gt;aiohttp-prometheus&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently wrote two articles on Python application monitoring with Prometheus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.codeship.com/monitoring-your-synchronous-python-web-applications-using-prometheus/"&gt;Monitoring Your Synchronous Python Web Applications Using Prometheus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.codeship.com/monitoring-your-asynchronous-python-web-applications-using-prometheus/"&gt;Monitoring Your Asynchronous Python Web Applications Using Prometheus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The demos can be found in the &lt;a href="https://github.com/amitsaha/python-prometheus-demo"&gt;python-prometheus-demo&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;Also checkout &lt;a href="https://github.com/amitsaha/aiohttp-prometheus"&gt;aiohttp-prometheus&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>Doing Math with Python Humble Bundle</title><link href="http://echorand.me/humble-bundle.html" rel="alternate"></link><published>2017-04-06T08:20:00+10:00</published><updated>2017-04-06T08:20:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:echorand.me,2017-04-06:/humble-bundle.html</id><summary type="html">&lt;p class="first last"&gt;Humble bundle&lt;/p&gt;
</summary><content type="html">&lt;p&gt;No Starch Press has launched a &amp;quot;Pay what you want&amp;quot; &lt;a class="reference external" href="https://www.humblebundle.com/books/python-book-bundle"&gt;Python Humble Bundle&lt;/a&gt; running from April 5th - April 19th!
Your purchases will help support the Python Software Foundation and I am excited to announce that Doing Math with Python is part of it.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Humble Bundle" src="http://echorand.me/images/humble-bundle.png" /&gt;
&lt;/div&gt;
&lt;p&gt;For 1+ USD you can get three books including &amp;quot;Doing Math with Python&amp;quot;! For 15+ USD you get nine excellent Python books!&lt;/p&gt;
&lt;p&gt;Get the bundle &lt;a class="reference external" href="https://www.humblebundle.com/books/python-book-bundle"&gt;here&lt;/a&gt;!&lt;/p&gt;
</content></entry><entry><title>Introducing distributed tracing in your Python application via Zipkin</title><link href="http://echorand.me/introducing-distributed-tracing-in-your-python-application-via-zipkin.html" rel="alternate"></link><published>2017-03-28T17:00:00+10:00</published><updated>2017-03-28T17:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:echorand.me,2017-03-28:/introducing-distributed-tracing-in-your-python-application-via-zipkin.html</id><summary type="html">&lt;p&gt;Distributed tracing is the idea of tracing a network request as it travels through your services, as it would be in a microservices based architecture. The primary reason you may want to do is to troubleshoot or monitor the latency of a request
as it travels through the different services â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Distributed tracing is the idea of tracing a network request as it travels through your services, as it would be in a microservices based architecture. The primary reason you may want to do is to troubleshoot or monitor the latency of a request
as it travels through the different services.&lt;/p&gt;
&lt;p&gt;In this post we will see a demo of how we can introduce distributed tracing into a Python network stack communicating via HTTP.
We have a service &lt;tt class="docutils literal"&gt;demo&lt;/tt&gt; which is a Flask application, which listens on &lt;tt class="docutils literal"&gt;/&lt;/tt&gt;. The handler for &lt;tt class="docutils literal"&gt;/&lt;/tt&gt; calls another service &lt;tt class="docutils literal"&gt;service1&lt;/tt&gt; via HTTP. We want to be able to see how much time a request spends in each service by introducing distributed tracing. Before we get to the code, let's talk briefly about a few concepts.&lt;/p&gt;
&lt;div class="section" id="distributed-tracing-concepts"&gt;
&lt;h2&gt;Distributed Tracing concepts&lt;/h2&gt;
&lt;p&gt;Roughly, a call to an &amp;quot;external service&amp;quot; starts a &lt;cite&gt;span&lt;/cite&gt;. We can have a &lt;cite&gt;span&lt;/cite&gt; nested within another span in a tree like fashion. All the spans in the context of a single request would form a &lt;cite&gt;trace&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Something like the following would perhaps explain it better in the context of our &lt;tt class="docutils literal"&gt;demo&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;service&lt;/tt&gt; network application stack:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
                &amp;lt;--------------------          Trace       ------------------------------------ &amp;gt;
                                    Start Root Span                        Start a nested span
External Request -&amp;gt; Demo HTTP app       ---&amp;gt;          Service 1 HTTP app        ---&amp;gt;          Process
&lt;/pre&gt;
&lt;p&gt;The span that is started from the &lt;tt class="docutils literal"&gt;service1&lt;/tt&gt; is designated as a child of the &lt;tt class="docutils literal"&gt;root span&lt;/tt&gt; which was started from the &lt;tt class="docutils literal"&gt;demo&lt;/tt&gt; application. In the context of Python, we can think of a span as a context manager and one context manager living within another context manager. And all these &amp;quot;contexts&amp;quot; together forming a trace.&lt;/p&gt;
&lt;p&gt;From the above it is somewhat clear (or not) that, the start of each span initiates a &amp;quot;timer&amp;quot; which then on the request's way back (or end of the span) is used to calculate the time the span lasted for. So, we need to have some thing (or things) which has to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Emit these data&lt;/li&gt;
&lt;li&gt;Recieve these data&lt;/li&gt;
&lt;li&gt;Allow us to collate them together and make it available to us for each trace or request.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This brings us to our next section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zipkin"&gt;
&lt;h2&gt;Zipkin&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://zipkin.io/"&gt;zipkin&lt;/a&gt; is a distributed tracing system which gives us the last two of the above requirements. How we emit these data from our application (the first point above) is dependent on the language we have written the application in and the distributed tracing system we chose for the last two requirements. In our case, &lt;a class="reference external" href="https://github.com/Yelp/py_zipkin"&gt;py_zipkin&lt;/a&gt; solves our problem.&lt;/p&gt;
&lt;p&gt;First, we will start &lt;tt class="docutils literal"&gt;zipkin&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;elasticsearch&lt;/tt&gt; as the backend as &lt;tt class="docutils literal"&gt;docker containers&lt;/tt&gt;. So, you need to have &lt;tt class="docutils literal"&gt;docker&lt;/tt&gt; installed. To get the data in &lt;tt class="docutils literal"&gt;elasticsearch&lt;/tt&gt; persisted, we will first create a &lt;a class="reference external" href="http://echorand.me/data-only-docker-containers.html"&gt;data container&lt;/a&gt; as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ docker create --name esdata openzipkin/zipkin-elasticsearch
&lt;/pre&gt;
&lt;p&gt;Then, download my code from &lt;a class="reference external" href="https://github.com/amitsaha/python-web-app-recipes/archive/zipkin_python_demo.zip"&gt;here&lt;/a&gt; and:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ wget ..
$ unzip ..
$ cd tracing/http_collector
$ ./start_zipkin.sh
..
..
zipkin          | 2017-03-28 03:48:00.936  INFO 9 --- [           main] zipkin.server.ZipkinServer
Started ZipkinServer in 7.36 seconds (JVM running for 8.595)
&lt;/pre&gt;
&lt;p&gt;If you now go to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:9411/&lt;/span&gt;&lt;/tt&gt; in your browser, you will see the Zipkin Web UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-traces"&gt;
&lt;h2&gt;Creating traces&lt;/h2&gt;
&lt;p&gt;Now, let's install the two libraries we need from the &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; via &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Let's now start our two services, first the &amp;quot;external&amp;quot; facing demo service:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ python demo.py

* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
* Restarting with stat
* Debugger is active!
* Debugger pin code: 961-605-579
&lt;/pre&gt;
&lt;p&gt;Then, the &amp;quot;internal&amp;quot; service 1:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ python service1.py
* Running on http://127.0.0.1:6000/ (Press CTRL+C to quit)
* Restarting with stat
* Debugger is active!
* Debugger pin code: 961-605-579
&lt;/pre&gt;
&lt;p&gt;Now, let's make couple of requests to the &lt;tt class="docutils literal"&gt;demo&lt;/tt&gt; service using &lt;tt class="docutils literal"&gt;$ curl localhost:5000&lt;/tt&gt; twice. If we go back to the Zipkin Web UI and click on &amp;quot;Find Traces&amp;quot;, we will see something like this:&lt;/p&gt;
&lt;img alt="" class="align-center" src="http://echorand.me/images/zipkin-traces.png" /&gt;
&lt;p&gt;If we click on one of the traces, we will see something like this:&lt;/p&gt;
&lt;img alt="" class="align-center" src="http://echorand.me/images/zipkin-trace1.png" /&gt;
&lt;p&gt;As we can see four spans were created (two spans in each service) with the 2nd, 3rd and 4th spans nested inside the first span. The time reported to be spent in each span will become clear next.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="application-code"&gt;
&lt;h2&gt;Application code&lt;/h2&gt;
&lt;p&gt;Let's look at the &lt;tt class="docutils literal"&gt;demo.py&lt;/tt&gt; file first:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;#64;zipkin_span(service_name='webapp', span_name='do_stuff')
def do_stuff():
    time.sleep(5)
    headers = create_http_headers_for_new_span()
    requests.get('http://localhost:6000/service1/', headers=headers)
    return 'OK'

&amp;#64;app.route('/')
def index():
    with zipkin_span(
        service_name='webapp',
        span_name='index',
        transport_handler=http_transport,
        port=5000,
        sample_rate=100, #0.05, # Value between 0.0 and 100.0
    ):
        do_stuff()
        time.sleep(10)
    return 'OK', 200
&lt;/pre&gt;
&lt;p&gt;We create the first span inside the &lt;tt class="docutils literal"&gt;/&lt;/tt&gt; handler function &lt;tt class="docutils literal"&gt;index()&lt;/tt&gt; via the &lt;tt class="docutils literal"&gt;zipkin_span()&lt;/tt&gt; context manager.
We specify the &lt;tt class="docutils literal"&gt;sample_rate=100&lt;/tt&gt; meaning it will trace every request (only for demo). The &lt;tt class="docutils literal"&gt;transport_handler&lt;/tt&gt;
specifies &amp;quot;how&amp;quot; the emitted traces are transported to the Zipkin &amp;quot;collector&amp;quot;. Here we use the &lt;tt class="docutils literal"&gt;http_transport&lt;/tt&gt;
provided as example by the &lt;tt class="docutils literal"&gt;py_zipkin&lt;/tt&gt; project.&lt;/p&gt;
&lt;p&gt;This handler function calls the &lt;tt class="docutils literal"&gt;do_stuff()&lt;/tt&gt; function where we create another span, but since it is in the same
service, we specify the same &lt;tt class="docutils literal"&gt;service_name&lt;/tt&gt; and decorate it with the &lt;tt class="docutils literal"&gt;zipkin_span&lt;/tt&gt; decorator. We have an artificial
time delay of 5s before we make a HTTP call to the &lt;tt class="docutils literal"&gt;service1&lt;/tt&gt; service. Since we want to continue the current span, we
pass in the span data as HTTP headers. These headers are created via the helper function, &lt;tt class="docutils literal"&gt;create_http_headers_for_new_span()&lt;/tt&gt; provided via &lt;tt class="docutils literal"&gt;py_zipkin&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Let's look at the &lt;tt class="docutils literal"&gt;service1.py&lt;/tt&gt; file next:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;#64;zipkin_span(service_name='service1', span_name='service1_do_stuff')
def do_stuff():
    time.sleep(5)
    return 'OK'

&amp;#64;app.route('/service1/')
def index():
    with zipkin_span(
        service_name='service1',
        zipkin_attrs=ZipkinAttrs(
            trace_id=request.headers['X-B3-TraceID'],
            span_id=request.headers['X-B3-SpanID'],
            parent_span_id=request.headers['X-B3-ParentSpanID'],
            flags=request.headers['X-B3-Flags'],
            is_sampled=request.headers['X-B3-Sampled'],
        ),
        span_name='index_service1',
        transport_handler=http_transport,
        port=6000,
        sample_rate=100, #0.05, # Value between 0.0 and 100.0
    ):
        do_stuff()
    return 'OK', 200
&lt;/pre&gt;
&lt;p&gt;This is almost the same as our &lt;tt class="docutils literal"&gt;demo&lt;/tt&gt; service above, but note how we set the &lt;tt class="docutils literal"&gt;zipkin_attrs&lt;/tt&gt; by making using of the
headers we were passed from the &lt;tt class="docutils literal"&gt;demo&lt;/tt&gt; service aboev. This makes sure that the span of &lt;tt class="docutils literal"&gt;service1&lt;/tt&gt; is nested within
the span of &lt;tt class="docutils literal"&gt;demo&lt;/tt&gt;. Note once again, how we introduce artificial delays here once again to make the trace show
the time spent in each service more clearly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ending-notes"&gt;
&lt;h2&gt;Ending Notes&lt;/h2&gt;
&lt;p&gt;Hopefully this post has given you a starting point of how you may go about implement distributed tracing. The following links
has more:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="zipkin.io"&gt;zipkin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://opentracing.io/"&gt;opentracing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content></entry><entry><title>QueueLogger and Python JSON Logger</title><link href="http://echorand.me/queuelogger-and-python-json-logger.html" rel="alternate"></link><published>2017-03-01T18:00:00+10:00</published><updated>2017-03-01T18:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:echorand.me,2017-03-01:/queuelogger-and-python-json-logger.html</id><summary type="html">&lt;div class="section" id="using-queuelogger-with-python-json-logger"&gt;
&lt;h2&gt;Using QueueLogger with Python JSON Logger&lt;/h2&gt;
&lt;p&gt;When logging from multiple processes (via &lt;tt class="docutils literal"&gt;multiprocessing&lt;/tt&gt; module),  using &lt;a class="reference external" href="https://pythonhosted.org/logutils/queue.html#logutils.queue.QueueHandler"&gt;QueueHandler&lt;/a&gt; is one  approach with Python 2.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;QueueHandler&lt;/tt&gt; however sets &lt;tt class="docutils literal"&gt;exc_info&lt;/tt&gt; attribute of a &lt;a class="reference external" href="https://docs.python.org/2/library/logging.html#logging.LogRecord"&gt;LogRecord&lt;/a&gt;
to &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; since it is not &amp;quot;pickleable&amp;quot; (more on this later). This becomes a problem when you use &lt;a class="reference external" href="https://github.com/madzak/python-json-logger/"&gt;python-json-logger&lt;/a&gt; to â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="using-queuelogger-with-python-json-logger"&gt;
&lt;h2&gt;Using QueueLogger with Python JSON Logger&lt;/h2&gt;
&lt;p&gt;When logging from multiple processes (via &lt;tt class="docutils literal"&gt;multiprocessing&lt;/tt&gt; module),  using &lt;a class="reference external" href="https://pythonhosted.org/logutils/queue.html#logutils.queue.QueueHandler"&gt;QueueHandler&lt;/a&gt; is one  approach with Python 2.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;QueueHandler&lt;/tt&gt; however sets &lt;tt class="docutils literal"&gt;exc_info&lt;/tt&gt; attribute of a &lt;a class="reference external" href="https://docs.python.org/2/library/logging.html#logging.LogRecord"&gt;LogRecord&lt;/a&gt;
to &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; since it is not &amp;quot;pickleable&amp;quot; (more on this later). This becomes a problem when you use &lt;a class="reference external" href="https://github.com/madzak/python-json-logger/"&gt;python-json-logger&lt;/a&gt; to format your logs as JSON since it relies on &lt;tt class="docutils literal"&gt;exc_info&lt;/tt&gt; being
&lt;a class="reference external" href="https://github.com/madzak/python-json-logger/blob/master/src/pythonjsonlogger/jsonlogger.py#L125"&gt;set&lt;/a&gt;.
The result is you don't get &lt;tt class="docutils literal"&gt;exc_info&lt;/tt&gt; in your logs. This is no however no longer true since this PR was merged.
&lt;a class="reference external" href="https://github.com/amitsaha/python-json-logging/blob/master/multi_processes_queue_logger/multi_process_json_logging.py"&gt;Sample Code&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="solution-1-modify-python-json-logger"&gt;
&lt;h3&gt;Solution #1: Modify Python JSON logger&lt;/h3&gt;
&lt;p&gt;The first solution is to look for &lt;tt class="docutils literal"&gt;exc_text&lt;/tt&gt; which is set by the standard
&lt;tt class="docutils literal"&gt;Formatter&lt;/tt&gt; class as per my &lt;a class="reference external" href="https://github.com/madzak/python-json-logger/pull/38/commits/ac42b205cc275fd0c226843f1dfd226695c09afd"&gt;PR&lt;/a&gt; and set that as the value of &lt;tt class="docutils literal"&gt;exc_info&lt;/tt&gt; which means at least we get the string representation of the traceback.
This PR is now merged.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution-2-subclass-queuehandler"&gt;
&lt;h3&gt;Solution #2: Subclass QueueHandler&lt;/h3&gt;
&lt;p&gt;The second solution is it to subclass &lt;tt class="docutils literal"&gt;logutils.queue.QueueHandler&lt;/tt&gt; as follows
and add pickling support for &lt;tt class="docutils literal"&gt;exc_info&lt;/tt&gt; via &lt;a class="reference external" href="https://github.com/ionelmc/python-tblib"&gt;tblib&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# Bring in support for serializing/deserializing tracebacks&lt;/span&gt;
&lt;span class="c1"&gt;# needed by QueueHandler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tblib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pickling_support&lt;/span&gt;
&lt;span class="n"&gt;pickling_support&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QueueHandlerWithTraceback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logutils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueueHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; QueueHandler with support for pickling/unpickling
        Tracebacks via tblib. We only override the prepare()
        method to *not* set `exc_info=None`
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;logutils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueueHandler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
        &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Instead of &lt;tt class="docutils literal"&gt;logutils.queue.QueueHandler&lt;/tt&gt;, we will then use &lt;tt class="docutils literal"&gt;QueueHandlerWithTraceback&lt;/tt&gt; instead
above (&lt;a class="reference external" href="https://github.com/amitsaha/python-json-logging/blob/master/multi_processes_queue_logger/multi_process_json_logging_tblib.py"&gt;Sample Code&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>Presentation slides with Jupyter Notebook</title><link href="http://echorand.me/presentation-slides-with-jupyter-notebook.html" rel="alternate"></link><published>2016-05-31T22:00:00+10:00</published><updated>2016-05-31T22:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:echorand.me,2016-05-31:/presentation-slides-with-jupyter-notebook.html</id><summary type="html">&lt;p&gt;I presented at the PyCon 2016 Education Summit on &amp;quot;Doing Math with Python&amp;quot; day before yesterday and a lightning talk yesterday. This is the first time, I prepared a &lt;a class="reference external" href="doingmathwithpython.github.io/pycon-us-2016"&gt;slide deck&lt;/a&gt; using Jupyter Notebook + Reveal.js. I was pleased with the content creation process and the end result. So, here â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I presented at the PyCon 2016 Education Summit on &amp;quot;Doing Math with Python&amp;quot; day before yesterday and a lightning talk yesterday. This is the first time, I prepared a &lt;a class="reference external" href="doingmathwithpython.github.io/pycon-us-2016"&gt;slide deck&lt;/a&gt; using Jupyter Notebook + Reveal.js. I was pleased with the content creation process and the end result. So, here is what worked for me.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please note that I have basically taken quite a bit of liberty with HTML where I didn't want to search for markdown way of doing something&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Basically, there are two steps:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create content in a Jupyter Notebook&lt;/li&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;jupyter-nbconvert&lt;/span&gt;&lt;/tt&gt; to convert the notebook to a HTML/JS based slide deck&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, I hosted the slide deck on GitHub pages.&lt;/p&gt;
&lt;p&gt;Please note that, you will need the latest version of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;jupyter-notebook&lt;/span&gt;&lt;/tt&gt; (4.2.0).&lt;/p&gt;
&lt;div class="section" id="quick-start-to-publish-your-slides-using-github-pages"&gt;
&lt;h2&gt;Quick start to publish your slides using GitHub pages&lt;/h2&gt;
&lt;p&gt;I have copied my &lt;em&gt;real&lt;/em&gt; slides to a repo along with a static copy of &amp;quot;reveal.js&amp;quot; (3.3.0) and a Bash script to automate it all. A good starting point then would  be to &lt;a class="reference external" href="https://github.com/amitsaha/jupyter-notebook-slides#fork-destination-box"&gt;fork&lt;/a&gt; my GitHub repo:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ git clone git&amp;#64;github.com:&amp;lt;your-user-name&amp;gt;/jupyter-notebook-slides.git
$ cd jupyter-notebook-slides
$ # Start notebook server
$ # Edit your slides

$ ./publish.sh
&lt;/pre&gt;
&lt;p&gt;Your slides should now be live at &lt;a class="reference external" href="http:/"&gt;http:/&lt;/a&gt;/&amp;lt;user-github-username&amp;gt;.github.io/jupyter-notebook-slides/&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="publish-sh-script"&gt;
&lt;h2&gt;publish.sh script&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;publish.sh&lt;/tt&gt; script is as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
#!/bin/bash

$ jupyter-nbconvert --to slides slides.ipynb --reveal-prefix=reveal.js
$ mv slides.slides.html  index.html
$ mkdir -p /tmp/workspace
$ cp -r * /tmp/workspace/
$ git add -A .
$ git commit -m &amp;quot;Update&amp;quot;
$ git checkout -B gh-pages
$ cp -r /tmp/workspace/* .
$ git add -A .
$ git commit -m &amp;quot;new version&amp;quot;
$ git push origin master gh-pages
$ git checkout master
$ rm -rf /tmp/workspace
&lt;/pre&gt;
&lt;p&gt;The part of the script above where I update the &lt;cite&gt;gh-pages&lt;/cite&gt; branch is of a quality where it does its job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="viewing-your-slides-locally"&gt;
&lt;h2&gt;Viewing your slides locally&lt;/h2&gt;
&lt;p&gt;To view your slides locally:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ jupyter-nbconvert --to slides slides.ipynb --reveal-prefix=reveal.js --post serve
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="understanding-what-s-going-on-in-brief"&gt;
&lt;h2&gt;Understanding what's going on in brief&lt;/h2&gt;
&lt;p&gt;The first step to do before you can start creating your slides is activate the &amp;quot;Slideshow&amp;quot; toolbar from the &amp;quot;View &amp;gt; Cell Toolbar menu&amp;quot;. Once you do that, each of your cells will have a drop down box, and you can select what the cell is. The options you will have are:  Slide, Sub-slide, Fragment, Skip and Notes.&lt;/p&gt;
&lt;p&gt;Like any other notebook, your &amp;quot;slides notebook&amp;quot; is also made up of cells. So, if you want a cell to be in your final slide deck, you will have to choose one of &amp;quot;Slide&amp;quot;, &amp;quot;Sub-slide&amp;quot; or &amp;quot;Fragment&amp;quot;. &amp;quot;Skip&amp;quot; will skip the cell from your final slide deck and cells marked with &amp;quot;Notes&amp;quot; will be visible in the &amp;quot;speaker mode&amp;quot; when you present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-related-posts-you-may-find-useful"&gt;
&lt;h2&gt;Other related posts you may find useful&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I think I found the CSS from &lt;a class="reference external" href="http://neuroscience.telenczuk.pl/?p=607"&gt;http://neuroscience.telenczuk.pl/?p=607&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for your work, DamiÃ¡n Avila and everyone else!&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Webucator video: Python classes - basics beyond the absolute basics</title><link href="http://echorand.me/webucator-video-python-classes-basics-beyond-the-absolute-basics.html" rel="alternate"></link><published>2016-04-17T14:00:00+10:00</published><updated>2016-04-17T14:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:echorand.me,2016-04-17:/webucator-video-python-classes-basics-beyond-the-absolute-basics.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.webucator.com/"&gt;Webucator&lt;/a&gt; recently created a video based on my &lt;a class="reference external" href="http://echorand.me/site/notes/articles/python_custom_class/article.html"&gt;Python classes: basics beyond the absolute basics&lt;/a&gt; article.&lt;/p&gt;
&lt;p&gt;You can see the video on &lt;a class="reference external" href="https://www.youtube.com/watch?v=0slsoyEhz40&amp;amp;feature=youtu.be"&gt;YouTube&lt;/a&gt;  or here below:&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe src="https://www.youtube.com/embed/0slsoyEhz40" allowfullscreen seamless frameBorder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;I think they really did a great job with it and supplements my article well.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.webucator.com/"&gt;Webucator&lt;/a&gt; recently created a video based on my &lt;a class="reference external" href="http://echorand.me/site/notes/articles/python_custom_class/article.html"&gt;Python classes: basics beyond the absolute basics&lt;/a&gt; article.&lt;/p&gt;
&lt;p&gt;You can see the video on &lt;a class="reference external" href="https://www.youtube.com/watch?v=0slsoyEhz40&amp;amp;feature=youtu.be"&gt;YouTube&lt;/a&gt;  or here below:&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe src="https://www.youtube.com/embed/0slsoyEhz40" allowfullscreen seamless frameBorder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;I think they really did a great job with it and supplements my article well.&lt;/p&gt;
</content></entry><entry><title>Replacing boto S3 mocks using moto in Python</title><link href="http://echorand.me/replacing-boto-s3-mocks-using-moto-in-python.html" rel="alternate"></link><published>2016-01-25T16:00:00+10:00</published><updated>2016-01-25T16:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:echorand.me,2016-01-25:/replacing-boto-s3-mocks-using-moto-in-python.html</id><summary type="html">&lt;p&gt;Let's say you have some Python application code which connects to Amazon S3 which
retrieves the keys in a bucket. Very likely, the application would be
using &lt;a class="reference external" href="http://boto.cloudhackers.com/en/latest/s3_tut.html"&gt;boto&lt;/a&gt;
and the code would like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import boto

def get_s3_conn():
    return boto.connect_s3('&amp;lt;aws-access-key', '&amp;lt;aws-secret-key&amp;gt;')

def list_keys():
    s3_conn = get_s3_conn()
    b = s3_conn.get_bucket â€¦&lt;/pre&gt;</summary><content type="html">&lt;p&gt;Let's say you have some Python application code which connects to Amazon S3 which
retrieves the keys in a bucket. Very likely, the application would be
using &lt;a class="reference external" href="http://boto.cloudhackers.com/en/latest/s3_tut.html"&gt;boto&lt;/a&gt;
and the code would like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import boto

def get_s3_conn():
    return boto.connect_s3('&amp;lt;aws-access-key', '&amp;lt;aws-secret-key&amp;gt;')

def list_keys():
    s3_conn = get_s3_conn()
    b = s3_conn.get_bucket('bucket_name')
    keys = b.list()
    return keys
&lt;/pre&gt;
&lt;p&gt;The corresponding test would presumably use some &lt;a class="reference external" href="mock.readthedocs.org"&gt;mocks and patching&lt;/a&gt;. Here is one way to write a test for the
above code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# Assume the code above is in a module list_keys
# in a function list_keys

from list_keys import list_keys

from mock import patch, Mock

def test_list_keys():
   mocked_keys = [Mock(key='mykey1'), Mock(key='key2')]
   mocked_connection = Mock()
   # Start with patching connect_s3
   with patch('boto.connect_s3', Mock(return_value=mocked_connection)):
       mocked_bucket = Mock()
       # Mock get_bucket() call
       mocked_connection.get_bucket = Mock(return_value=mocked_bucket)
       # Mock the list() call to return the keys you want
       mocked_bucket.list = Mock(return_value=mocked_keys)
       keys = list_keys()

       assert keys == mocked_keys
&lt;/pre&gt;
&lt;p&gt;I thought I really had no other way to get around mocks and patches if
I wanted to test this part of my application. But, I discovered &lt;a class="reference external" href="https://github.com/spulec/moto"&gt;moto&lt;/a&gt;. Then life became easier.&lt;/p&gt;
&lt;p&gt;Using moto's S3 support, I don't need to worry about the mocking and
patching the boto calls any more. Here is the same test above, but
using moto:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from list_keys import get_s3_conn, list_keys
from moto import mock_s3

def test_list_keys():

    expected_keys = ['key1', 'key2']

    moto = mock_s3()
    # We enter &amp;quot;moto&amp;quot; mode using this
    moto.start()

    # Get the connection object
    conn = get_s3_conn()

    # Set up S3 as we expect it to be
    conn.create_bucket('bucket_name')
    for name in expected_keys:
        k = conn.get_bucket('bucket_name').new_key(name)
        k.set_contents_from_string('abcdedsd')

    # Now call the actual function
    keys = list_keys()
    assert expected_keys == [k.name for k in keys]

    # get out of moto mode
    moto.stop()
&lt;/pre&gt;
&lt;p&gt;Unless it is obvious, here are two major differences from the previous
test:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We don't mock or patch anything&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The point #1 above is the direct reason I would consider using moto
for testing S3 interactions rather than setting up mocks. This helps us in
the scenario in which this section of the code lies in another
package, not the one you are writing tests for currently. You can
actually call this section of the code and let the interaction with S3
happen as if it were interacting directly with Amazon S3. I think this
allows deeper penetration of your tests and as a result your code's
interactions with others.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The test code has to explicitly first setup the expected state&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This may seem like more work, but I think it still outweighs the
benefits as mentioned previously.&lt;/p&gt;
&lt;p&gt;Please checkout &lt;a class="reference external" href="https://github.com/spulec/moto"&gt;moto&lt;/a&gt; here.&lt;/p&gt;
&lt;p&gt;If you like this post, please follow &lt;a class="reference external" href="https://twitter.com/PythonTestTips"&gt;PythonTestTips&lt;/a&gt; on Twitter.&lt;/p&gt;
</content></entry><entry><title>tempfile.NamedTemporaryFile() in Python</title><link href="http://echorand.me/tempfilenamedtemporaryfile-in-python.html" rel="alternate"></link><published>2016-01-20T11:00:00+10:00</published><updated>2016-01-20T11:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:echorand.me,2016-01-20:/tempfilenamedtemporaryfile-in-python.html</id><summary type="html">&lt;p&gt;In Python, when you need to create a temporary file with a filename
associated to it on disk, &lt;a class="reference external" href="https://docs.python.org/2/library/tempfile.html#tempfile.TemporaryFile"&gt;NamedTemporaryFile&lt;/a&gt;
function in the &lt;tt class="docutils literal"&gt;tempfile&lt;/tt&gt; module is the goto function. Here are some use
cases that I think one might use it for.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Case #1: You simply need a named empty temporary â€¦&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In Python, when you need to create a temporary file with a filename
associated to it on disk, &lt;a class="reference external" href="https://docs.python.org/2/library/tempfile.html#tempfile.TemporaryFile"&gt;NamedTemporaryFile&lt;/a&gt;
function in the &lt;tt class="docutils literal"&gt;tempfile&lt;/tt&gt; module is the goto function. Here are some use
cases that I think one might use it for.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Case #1: You simply need a named empty temporary file&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You just want a file object (pointing to an &lt;em&gt;empty&lt;/em&gt; file) which has a
filename associated to it and hence you cannot use a &lt;a class="reference external" href="https://docs.python.org/2/library/stringio.html"&gt;StringIO&lt;/a&gt; object:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from tempfile import NamedTemporaryFile
f = NamedTemporaryFile()

# use f
..
&lt;/pre&gt;
&lt;p&gt;Once &lt;tt class="docutils literal"&gt;f&lt;/tt&gt; is garbage collected, or closed explicitly, the file will automatically be
removed from disk.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Case #2: You need a empty temporary file with a custom name&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You need a temporary file, but want to change the filename to
something you need:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from tempfile import NamedTemporaryFile
f = NamedTemporaryFile()

# Change the file name to something
f.name = 'myfilename.myextension'

# use f
&lt;/pre&gt;
&lt;p&gt;Since you change the name of the file, this file will automatically
&lt;em&gt;not&lt;/em&gt; be removed from disk when you close the file or the file object is
garbage collected. Hence, you will need to do so yourself:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from tempfile import NamedTemporaryFile
f = NamedTemporaryFile()

# Save original name (the &amp;quot;name&amp;quot; actually is the absolute path)
original_path = f.name

# Change the file name to something
f.name = 'myfilename.myextension'

# use f

..

# Remove the file
os.unlink(original_path)
assert not os.path.exists(original_path)
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Case #3: You need a temporary file, write some contents, read from it later&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This use case is where you need a temporary file, but you want to work
with it like a &amp;quot;normal&amp;quot; file on disk - write something to it and
later, read it from it. In other words, you just want to control when
the file gets removed from disk.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from tempfile import NamedTemporaryFile
# When delete=False is specified, this file will not be
# removed from disk automatically upon close/garbage collection
f = NamedTemporaryFile(delete=False)

# Save the file path
path = f.name

# Write something to it
f.write('Some random data')

# You can now close the file and later
# open and read it again
f.close()
data = open(path).read()

# do some work with the data

# Or, make a seek(0) call on the file object and read from it
# The file mode is by default &amp;quot;w+&amp;quot; which means, you can read from
# and write to it.
f.seek(0)
data = f.read()

# Close the file
f.close()

..

# Remove the file
os.unlink(path)
assert not os.path.exists(path)
&lt;/pre&gt;
&lt;p&gt;By default &lt;tt class="docutils literal"&gt;delete&lt;/tt&gt; is set to &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; when calling
&lt;tt class="docutils literal"&gt;NamedTemporaryFile()&lt;/tt&gt;, and thus setting it to &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; gives more
control on when the file gets removed from disk.&lt;/p&gt;
</content></entry><entry><title>Mock objects and non-existent attributes/methods in Python</title><link href="http://echorand.me/mock-objects-and-non-existent-attributesmethods-in-python.html" rel="alternate"></link><published>2016-01-11T14:00:00+10:00</published><updated>2016-01-11T14:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:echorand.me,2016-01-11:/mock-objects-and-non-existent-attributesmethods-in-python.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Updated&lt;/em&gt;: Fixed typo in the last paragraph.&lt;/p&gt;
&lt;p&gt;Today, I was curious to see this behavior of &lt;tt class="docutils literal"&gt;Mock()&lt;/tt&gt; objects when using &lt;a class="reference external" href="https://github.com/testing-cabal/mock"&gt;mock&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from mock import Mock
&amp;gt;&amp;gt;&amp;gt; m = Mock()
&amp;gt;&amp;gt;&amp;gt; m.i_dont_exist
&amp;lt;Mock name='mock.i_dont_exist' id='139841609578768'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; m.i_dont_exist()
&amp;lt;Mock name='mock.i_dont_exist()' id='139841609106896'&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The above is expected, since I have â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Updated&lt;/em&gt;: Fixed typo in the last paragraph.&lt;/p&gt;
&lt;p&gt;Today, I was curious to see this behavior of &lt;tt class="docutils literal"&gt;Mock()&lt;/tt&gt; objects when using &lt;a class="reference external" href="https://github.com/testing-cabal/mock"&gt;mock&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from mock import Mock
&amp;gt;&amp;gt;&amp;gt; m = Mock()
&amp;gt;&amp;gt;&amp;gt; m.i_dont_exist
&amp;lt;Mock name='mock.i_dont_exist' id='139841609578768'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; m.i_dont_exist()
&amp;lt;Mock name='mock.i_dont_exist()' id='139841609106896'&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The above is expected, since I have not declared a spec when creating the &lt;tt class="docutils literal"&gt;Mock()&lt;/tt&gt; object, so even when you call a non-existent method or get/set a non-existent attribute, you will not get a &lt;tt class="docutils literal"&gt;AttributeError&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;However, I was suprised by the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; m.assert_not_calledd
Traceback (most recent call last):
 File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
File &amp;quot;/home/asaha/.local/share/virtualenvs/606fc8723c1a01b/lib/python2.7/site-packages/mock/mock.py&amp;quot;, line 721, in _    _getattr__
   raise AttributeError(name)
 AttributeError: assert_not_calledd
&lt;/pre&gt;
&lt;p&gt;And the following as well:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; m.assert_foo
Traceback (most recent call last):
File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
File &amp;quot;/home/asaha/.local/share/virtualenvs/606fc8723c1a01b/lib/python2.7/site-packages/mock/mock.py&amp;quot;, line 721, in __getattr__
  raise AttributeError(name)
  AttributeError: assert_foo
&lt;/pre&gt;
&lt;p&gt;I guessed that there is likely a check explicitly for &lt;strong&gt;non-existent
attributes&lt;/strong&gt; starting with &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt;, and if it finds so, it will
raise a &lt;tt class="docutils literal"&gt;AttributeError&lt;/tt&gt;.  If you look at the &lt;a class="reference external" href="https://github.com/testing-cabal/mock/blob/master/mock/mock.py#L708"&gt;__getattr__&lt;/a&gt;
method in &lt;tt class="docutils literal"&gt;mock.py&lt;/tt&gt;, you will see that this is pretty much what is
happening. The exact lines are below:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
if not self._mock_unsafe: # self._mock_unsafe is by default False
    if name.startswith(('assert', 'assret')): # It comes here and an AttributeError is raised
        raise AttributeError(name)
&lt;/pre&gt;
&lt;p&gt;This is certainly a good thing, since I have often seen
&lt;a class="reference external" href="http://engineeringblog.yelp.com/2015/02/assert_called_once-threat-or-menace.html"&gt;assert_called_once&lt;/a&gt;
in codebases, and is fairly easy to overlook.&lt;/p&gt;
</content></entry><entry><title>A virtualenv first approach to Python projects</title><link href="http://echorand.me/a-virtualenv-first-approach-to-python-projects.html" rel="alternate"></link><published>2015-11-30T12:00:00+10:00</published><updated>2015-11-30T12:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:echorand.me,2015-11-30:/a-virtualenv-first-approach-to-python-projects.html</id><summary type="html">&lt;p&gt;I have until the last few months (of my ~4 years of working with
Python) always worked without virtualenv for all my Python
projects. Why? I think I found the whole idea of having to do the
following two steps before I work on something cumbersome:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Remember the exact virtualenv â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I have until the last few months (of my ~4 years of working with
Python) always worked without virtualenv for all my Python
projects. Why? I think I found the whole idea of having to do the
following two steps before I work on something cumbersome:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Remember the exact virtualenv name, and then&lt;/li&gt;
&lt;li&gt;Activate it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That said, I was very much aware that it was certainly a good thing
to do and would cause me less headaches someday. That someday finally
came, and I ran into conflicting package requirements for applications
which needed to run simultaneously. This forced me to start using
virtualenvs. I think I also found the tool which will make me  keep
using them even when I don't &lt;em&gt;need&lt;/em&gt; to. The tool is &lt;a class="reference external" href="https://github.com/berdario/pew"&gt;pew&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="installation-and-basics"&gt;
&lt;h2&gt;Installation and Basics&lt;/h2&gt;
&lt;p&gt;The home page lists various options of installing &lt;tt class="docutils literal"&gt;pew&lt;/tt&gt;. The most
straightforward is of course to just use &lt;tt class="docutils literal"&gt;pip install pew&lt;/tt&gt;. Once you
have it installed, typing &lt;tt class="docutils literal"&gt;pew&lt;/tt&gt; lists the various sub-commands, such
as &lt;tt class="docutils literal"&gt;new&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;workon&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;ls&lt;/tt&gt; and others. Eac of the sub-commands is
accompanied by a summary of they will do.&lt;/p&gt;
&lt;p&gt;So far, I have been mostly working with the above sub-commands. Here
is how we can create a new virtualenv:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ pew new flask-graphql-demo
New python executable in flask-graphql-demo/bin/python2
Also creating executable in flask-graphql-demo/bin/python
Installing setuptools, pip...done.
Launching subshell in virtual environment. Type 'exit' or 'Ctrl+D' to return.
flask-graphql-demo $
&lt;/pre&gt;
&lt;p&gt;Our virtualenv &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;flask-graphql-demo&lt;/span&gt;&lt;/tt&gt; is created and we are in it, which we can check:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ which pip
~/.local/share/virtualenvs/flask-graphql-demo/bin/pip
&lt;/pre&gt;
&lt;p&gt;We can do all our usual work now (installing other packages, running
our applications) and once done, we can simply &lt;tt class="docutils literal"&gt;exit&lt;/tt&gt; and we will be
out of the virtualenv.&lt;/p&gt;
&lt;p&gt;Now, if I want to resume work on this particular project, I can first
use &lt;tt class="docutils literal"&gt;pew ls&lt;/tt&gt; to list the currently created virtualenvs:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ pew ls
flask-graphql-demo
&lt;/pre&gt;
&lt;p&gt;and then use &lt;tt class="docutils literal"&gt;pew workon &lt;span class="pre"&gt;flask-graphql-demo&lt;/span&gt;&lt;/tt&gt; to start working on it
again. On Linux, &lt;tt class="docutils literal"&gt;pew workon&lt;/tt&gt; also gives me all the available
virtualenvs as suggestions automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As you may have already seen, &lt;tt class="docutils literal"&gt;pew&lt;/tt&gt; has a number of other features
which should make working with &lt;tt class="docutils literal"&gt;virtualenvs&lt;/tt&gt; really easy. It has
definitely made me change my approach to working on Python projects.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>PYTHONHASHSEED and your tests</title><link href="http://echorand.me/pythonhashseed-and-your-tests.html" rel="alternate"></link><published>2015-11-19T11:00:00+10:00</published><updated>2015-11-19T11:00:00+10:00</updated><author><name>Amit Saha</name></author><id>tag:echorand.me,2015-11-19:/pythonhashseed-and-your-tests.html</id><summary type="html">&lt;p&gt;Recently at work, I wanted to test a string which was being created by the &lt;tt class="docutils literal"&gt;urllib.urlencode()&lt;/tt&gt; function. My first attempt was simple - test my expected string with that being created by the function above using unittest's &lt;tt class="docutils literal"&gt;assertEquals()&lt;/tt&gt; function. It passed all the times I ran the tests before I â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently at work, I wanted to test a string which was being created by the &lt;tt class="docutils literal"&gt;urllib.urlencode()&lt;/tt&gt; function. My first attempt was simple - test my expected string with that being created by the function above using unittest's &lt;tt class="docutils literal"&gt;assertEquals()&lt;/tt&gt; function. It passed all the times I ran the tests before I committed the code, but it started failing when the tests were ran as part of the deployment process.&lt;/p&gt;
&lt;p&gt;The input to the &lt;tt class="docutils literal"&gt;urllib.urlencode()&lt;/tt&gt; function is a dictionary of key value pairs and hence the returned value can really be any of the arrangements of the key value pairs. So, for example &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{'key1':'value',&lt;/span&gt; &lt;span class="pre"&gt;'key2':'value'}&lt;/span&gt;&lt;/tt&gt; can result in the query string &lt;tt class="docutils literal"&gt;key1=value&amp;amp;key2=value&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;key2=value&amp;amp;key1=value&lt;/tt&gt;. We cannot know for sure and we shouldn't need to.&lt;/p&gt;
&lt;p&gt;Thus, we cannot use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;self.assertEquals(urllib.urlencode({'key1':'value',&lt;/span&gt; &lt;span class="pre"&gt;{'key2':'value'}),&lt;/span&gt; 'key1=value&amp;amp;key2=value')&lt;/tt&gt; without the possibility that it will fail eventually. The reason why we see such behaviour of course is that for dictionaries, the order in which the keys are stored is not deterministic - or known apriori. You can see this behaviour by explicitly setting the value of &lt;a class="reference external" href="https://docs.python.org/3.3/using/cmdline.html#envvar-PYTHONHASHSEED"&gt;PYTHONHASHSEED&lt;/a&gt; to different values.&lt;/p&gt;
&lt;p&gt;So, how should we write such tests? Let's see one possible way which I will state as - &lt;strong&gt;Instead of asserting the equality of entire objects, we should be testing for the presence of the expected constituent objects&lt;/strong&gt;. I demonstrate it via two similar examples:&lt;/p&gt;
&lt;p&gt;(Note that I have used the builtin &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement to test here)&lt;/p&gt;
&lt;div class="section" id="url-encoding-via-urllib-urlencode"&gt;
&lt;h2&gt;URL encoding via urllib.urlencode()&lt;/h2&gt;
&lt;p&gt;As our first example, let's consider the &lt;tt class="docutils literal"&gt;urllib.urlencode()&lt;/tt&gt; function:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
 # Test for the role of PYTHONHASHSEED - urllib urlencode

import urllib
urlencode_input = {'param1': 'value', 'param2': 'value'}
expected_query_string = 'param1=value&amp;amp;param2=value'

# This will fail for *some* PYTHONHASHSEED
def test_urlencode_1():
    assert urllib.urlencode(urlencode_input) == expected_query_string

# This will not fail for *any* PYTHONHASHSEED
def test_urlencode_2():
    query_string = urllib.urlencode(urlencode_input)
    assert 'param1=value' in query_string
    assert 'param2=value' in query_string
&lt;/pre&gt;
&lt;p&gt;Run the above tests a few times each starting with a different value of &lt;tt class="docutils literal"&gt;PYTHONHASHEED&lt;/tt&gt; (for. e.g on Linux/Mac OS X, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;PYTHONHASHSEED=&amp;lt;some&lt;/span&gt; integer&amp;gt; nosetests&lt;/tt&gt;) and you will be easily able to see that the first test will fail for some value, but the second test will always pass.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="joining-strings-from-dictionaries"&gt;
&lt;h2&gt;Joining strings from dictionaries&lt;/h2&gt;
&lt;p&gt;This is similar to the previous example. Assume a function below which basically concatenates multiple key value pairs to create the conditional part of a SQL &lt;tt class="docutils literal"&gt;WHERE&lt;/tt&gt; clause:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def create_where_clause(conditions):
    where_clause = ''
    for k, v in conditions.iteritems():
        where_clause += '%s=%s AND ' % (k, v)
    # remove the last AND and a trailing space
    return where_clause[:-5]
&lt;/pre&gt;
&lt;p&gt;Here are two ways of testing this function - the first will fail for some test run, where as the second will not:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# This will fail for *some* PYTHONHASHSEED
def test_where_clause_1():

    where_clause = create_where_clause({'item1': 1, 'item2': 2})
    expected_where_clause = 'item1=1 AND item2=2'
    assert where_clause==expected_where_clause

# This will not fail for *any* PYTHONHASHSEED
def test_where_clause_2():

    where_clause = create_where_clause({'item1': 1, 'item2': 2})

    # Deconstruct the string returned into individual conditions
    conditions = [cond.strip() for cond in where_clause.split('AND')]
    assert 'item1=1' in conditions
    assert 'item2=2' in conditions
&lt;/pre&gt;
&lt;p&gt;If you run the above tests with different &lt;tt class="docutils literal"&gt;PYTHONHASHSEED&lt;/tt&gt; values, you will notice similar behaviour to the previous example.&lt;/p&gt;
&lt;p&gt;If you are using &lt;a class="reference external" href="https://testrun.org/tox/latest/example/basic.html#special-handling-of-pythonhashseed"&gt;tox&lt;/a&gt; to run your tests, it automatically sets &lt;tt class="docutils literal"&gt;PYTHONHASHSEED&lt;/tt&gt; to a random integer when it is invoked. Hence, if you have never had your tests fail so far, there is a good chance your tests do not make any assumptions of order when dealing with Python dictionaries - but that of course is no guarantee that your tests are completely free since there may be this particular random number that has not been tried yet! So, ideally you may just want to do run your tests (especially if they don't take long) for a large number of PYTHONHASHSEED values just to be more confident.&lt;/p&gt;
&lt;/div&gt;
</content></entry></feed>